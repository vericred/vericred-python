# coding: utf-8

"""
    Vericred API

    Vericred's API allows you to search for Health Plans that a specific doctor
accepts.

## Getting Started

Visit our [Developer Portal](https://developers.vericred.com) to
create an account.

Once you have created an account, you can create one Application for
Production and another for our Sandbox (select the appropriate Plan when
you create the Application).

## SDKs

Our API follows standard REST conventions, so you can use any HTTP client
to integrate with us. You will likely find it easier to use one of our
[autogenerated SDKs](https://github.com/vericred/?query=vericred-),
which we make available for several common programming languages.

## Authentication

To authenticate, pass the API Key you created in the Developer Portal as
a `Vericred-Api-Key` header.

`curl -H 'Vericred-Api-Key: YOUR_KEY' "https://api.vericred.com/providers?search_term=Foo&zip_code=11215"`

## Versioning

Vericred's API default to the latest version.  However, if you need a specific
version, you can request it with an `Accept-Version` header.

The current version is `v3`.  Previous versions are `v1` and `v2`.

`curl -H 'Vericred-Api-Key: YOUR_KEY' -H 'Accept-Version: v2' "https://api.vericred.com/providers?search_term=Foo&zip_code=11215"`

## Pagination

Endpoints that accept `page` and `per_page` parameters are paginated. They expose
four additional fields that contain data about your position in the response,
namely `Total`, `Per-Page`, `Link`, and `Page` as described in [RFC-5988](https://tools.ietf.org/html/rfc5988).

For example, to display 5 results per page and view the second page of a
`GET` to `/networks`, your final request would be `GET /networks?....page=2&per_page=5`.

## Sideloading

When we return multiple levels of an object graph (e.g. `Provider`s and their `State`s
we sideload the associated data.  In this example, we would provide an Array of
`State`s and a `state_id` for each provider.  This is done primarily to reduce the
payload size since many of the `Provider`s will share a `State`

```
{
  providers: [{ id: 1, state_id: 1}, { id: 2, state_id: 1 }],
  states: [{ id: 1, code: 'NY' }]
}
```

If you need the second level of the object graph, you can just match the
corresponding id.

## Selecting specific data

All endpoints allow you to specify which fields you would like to return.
This allows you to limit the response to contain only the data you need.

For example, let's take a request that returns the following JSON by default

```
{
  provider: {
    id: 1,
    name: 'John',
    phone: '1234567890',
    field_we_dont_care_about: 'value_we_dont_care_about'
  },
  states: [{
    id: 1,
    name: 'New York',
    code: 'NY',
    field_we_dont_care_about: 'value_we_dont_care_about'
  }]
}
```

To limit our results to only return the fields we care about, we specify the
`select` query string parameter for the corresponding fields in the JSON
document.

In this case, we want to select `name` and `phone` from the `provider` key,
so we would add the parameters `select=provider.name,provider.phone`.
We also want the `name` and `code` from the `states` key, so we would
add the parameters `select=states.name,states.code`.  The id field of
each document is always returned whether or not it is requested.

Our final request would be `GET /providers/12345?select=provider.name,provider.phone,states.name,states.code`

The response would be

```
{
  provider: {
    id: 1,
    name: 'John',
    phone: '1234567890'
  },
  states: [{
    id: 1,
    name: 'New York',
    code: 'NY'
  }]
}
```

## Benefits summary format
Benefit cost-share strings are formatted to capture:
 * Network tiers
 * Compound or conditional cost-share
 * Limits on the cost-share
 * Benefit-specific maximum out-of-pocket costs

**Example #1**
As an example, we would represent [this Summary of Benefits &amp; Coverage](https://s3.amazonaws.com/vericred-data/SBC/2017/33602TX0780032.pdf) as:

* **Hospital stay facility fees**:
  - Network Provider: `$400 copay/admit plus 20% coinsurance`
  - Out-of-Network Provider: `$1,500 copay/admit plus 50% coinsurance`
  - Vericred's format for this benefit: `In-Network: $400 before deductible then 20% after deductible / Out-of-Network: $1,500 before deductible then 50% after deductible`

* **Rehabilitation services:**
  - Network Provider: `20% coinsurance`
  - Out-of-Network Provider: `50% coinsurance`
  - Limitations & Exceptions: `35 visit maximum per benefit period combined with Chiropractic care.`
  - Vericred's format for this benefit: `In-Network: 20% after deductible / Out-of-Network: 50% after deductible | limit: 35 visit(s) per Benefit Period`

**Example #2**
In [this other Summary of Benefits &amp; Coverage](https://s3.amazonaws.com/vericred-data/SBC/2017/40733CA0110568.pdf), the **specialty_drugs** cost-share has a maximum out-of-pocket for in-network pharmacies.
* **Specialty drugs:**
  - Network Provider: `40% coinsurance up to a $500 maximum for up to a 30 day supply`
  - Out-of-Network Provider `Not covered`
  - Vericred's format for this benefit: `In-Network: 40% after deductible, up to $500 per script / Out-of-Network: 100%`

**BNF**

Here's a description of the benefits summary string, represented as a context-free grammar:

```
root                      ::= coverage

coverage                  ::= (simple_coverage | tiered_coverage) (space pipe space coverage_modifier)?
tiered_coverage           ::= tier (space slash space tier)*
tier                      ::= tier_name colon space (tier_coverage | not_applicable)
tier_coverage             ::= simple_coverage (space (then | or | and) space simple_coverage)* tier_limitation?
simple_coverage           ::= (pre_coverage_limitation space)? coverage_amount (space post_coverage_limitation)? (comma? space coverage_condition)?
coverage_modifier         ::= limit_condition colon space (((simple_coverage | simple_limitation) (semicolon space see_carrier_documentation)?) | see_carrier_documentation | waived_if_admitted | shared_across_tiers)
waived_if_admitted        ::= ("copay" space)? "waived if admitted"
simple_limitation         ::= pre_coverage_limitation space "copay applies"
tier_name                 ::= "In-Network-Tier-2" | "Out-of-Network" | "In-Network"
limit_condition           ::= "limit" | "condition"
tier_limitation           ::= comma space "up to" space (currency | (integer space time_unit plural?)) (space post_coverage_limitation)?
coverage_amount           ::= currency | unlimited | included | unknown | percentage | (digits space (treatment_unit | time_unit) plural?)
pre_coverage_limitation   ::= first space digits space time_unit plural?
post_coverage_limitation  ::= (((then space currency) | "per condition") space)? "per" space (treatment_unit | (integer space time_unit) | time_unit) plural?
coverage_condition        ::= ("before deductible" | "after deductible" | "penalty" | allowance | "in-state" | "out-of-state") (space allowance)?
allowance                 ::= upto_allowance | after_allowance
upto_allowance            ::= "up to" space (currency space)? "allowance"
after_allowance           ::= "after" space (currency space)? "allowance"
see_carrier_documentation ::= "see carrier documentation for more information"
shared_across_tiers       ::= "shared across all tiers"
unknown                   ::= "unknown"
unlimited                 ::= /[uU]nlimited/
included                  ::= /[iI]ncluded in [mM]edical/
time_unit                 ::= /[hH]our/ | (((/[cC]alendar/ | /[cC]ontract/) space)? /[yY]ear/) | /[mM]onth/ | /[dD]ay/ | /[wW]eek/ | /[vV]isit/ | /[lL]ifetime/ | ((((/[bB]enefit/ plural?) | /[eE]ligibility/) space)? /[pP]eriod/)
treatment_unit            ::= /[pP]erson/ | /[gG]roup/ | /[cC]ondition/ | /[sS]cript/ | /[vV]isit/ | /[eE]xam/ | /[iI]tem/ | /[sS]tay/ | /[tT]reatment/ | /[aA]dmission/ | /[eE]pisode/
comma                     ::= ","
colon                     ::= ":"
semicolon                 ::= ";"
pipe                      ::= "|"
slash                     ::= "/"
plural                    ::= "(s)" | "s"
then                      ::= "then" | ("," space) | space
or                        ::= "or"
and                       ::= "and"
not_applicable            ::= "Not Applicable" | "N/A" | "NA"
first                     ::= "first"
currency                  ::= "$" number
percentage                ::= number "%"
number                    ::= float | integer
float                     ::= digits "." digits
integer                   ::= /[0-9]/+ (comma_int | under_int)*
comma_int                 ::= ("," /[0-9]/*3) !"_"
under_int                 ::= ("_" /[0-9]/*3) !","
digits                    ::= /[0-9]/+ ("_" /[0-9]/+)*
space                     ::= /[ \t]/+
```



    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class VisionPlanBenefits(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, individual_deductible=None, family_deductible=None, individual_annual_max=None, family_max_annual_max=None, individual_moop=None, family_moop=None, eye_exam=None, frame=None, contacts=None, laser_vision_correction=None, progressive_lenses=None, uv_lenses=None, scratch_resistant_coating=None, antireflective_coating=None, photochromatic_single_vision=None, photochromatic_multifocal=None, polychromatic_single_vision=None, polychromatic_multifocal=None):
        """
        VisionPlanBenefits - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'individual_deductible': 'str',
            'family_deductible': 'str',
            'individual_annual_max': 'str',
            'family_max_annual_max': 'str',
            'individual_moop': 'str',
            'family_moop': 'str',
            'eye_exam': 'str',
            'frame': 'str',
            'contacts': 'str',
            'laser_vision_correction': 'str',
            'progressive_lenses': 'str',
            'uv_lenses': 'str',
            'scratch_resistant_coating': 'str',
            'antireflective_coating': 'str',
            'photochromatic_single_vision': 'str',
            'photochromatic_multifocal': 'str',
            'polychromatic_single_vision': 'str',
            'polychromatic_multifocal': 'str'
        }

        self.attribute_map = {
            'individual_deductible': 'individual_deductible',
            'family_deductible': 'family_deductible',
            'individual_annual_max': 'individual_annual_max',
            'family_max_annual_max': 'family_max_annual_max',
            'individual_moop': 'individual_moop',
            'family_moop': 'family_moop',
            'eye_exam': 'eye_exam',
            'frame': 'frame',
            'contacts': 'contacts',
            'laser_vision_correction': 'laser_vision_correction',
            'progressive_lenses': 'progressive_lenses',
            'uv_lenses': 'uv_lenses',
            'scratch_resistant_coating': 'scratch_resistant_coating',
            'antireflective_coating': 'antireflective_coating',
            'photochromatic_single_vision': 'photochromatic_single_vision',
            'photochromatic_multifocal': 'photochromatic_multifocal',
            'polychromatic_single_vision': 'polychromatic_single_vision',
            'polychromatic_multifocal': 'polychromatic_multifocal'
        }

        self._individual_deductible = individual_deductible
        self._family_deductible = family_deductible
        self._individual_annual_max = individual_annual_max
        self._family_max_annual_max = family_max_annual_max
        self._individual_moop = individual_moop
        self._family_moop = family_moop
        self._eye_exam = eye_exam
        self._frame = frame
        self._contacts = contacts
        self._laser_vision_correction = laser_vision_correction
        self._progressive_lenses = progressive_lenses
        self._uv_lenses = uv_lenses
        self._scratch_resistant_coating = scratch_resistant_coating
        self._antireflective_coating = antireflective_coating
        self._photochromatic_single_vision = photochromatic_single_vision
        self._photochromatic_multifocal = photochromatic_multifocal
        self._polychromatic_single_vision = polychromatic_single_vision
        self._polychromatic_multifocal = polychromatic_multifocal


    @property
    def individual_deductible(self):
        """
        Gets the individual_deductible of this VisionPlanBenefits.
        Individual Deductible benefit string

        :return: The individual_deductible of this VisionPlanBenefits.
        :rtype: str
        """
        return self._individual_deductible

    @individual_deductible.setter
    def individual_deductible(self, individual_deductible):
        """
        Sets the individual_deductible of this VisionPlanBenefits.
        Individual Deductible benefit string

        :param individual_deductible: The individual_deductible of this VisionPlanBenefits.
        :type: str
        """

        self._individual_deductible = individual_deductible

    @property
    def family_deductible(self):
        """
        Gets the family_deductible of this VisionPlanBenefits.
        Family Deductible benefit string

        :return: The family_deductible of this VisionPlanBenefits.
        :rtype: str
        """
        return self._family_deductible

    @family_deductible.setter
    def family_deductible(self, family_deductible):
        """
        Sets the family_deductible of this VisionPlanBenefits.
        Family Deductible benefit string

        :param family_deductible: The family_deductible of this VisionPlanBenefits.
        :type: str
        """

        self._family_deductible = family_deductible

    @property
    def individual_annual_max(self):
        """
        Gets the individual_annual_max of this VisionPlanBenefits.
        Individual Annual Max benefit string

        :return: The individual_annual_max of this VisionPlanBenefits.
        :rtype: str
        """
        return self._individual_annual_max

    @individual_annual_max.setter
    def individual_annual_max(self, individual_annual_max):
        """
        Sets the individual_annual_max of this VisionPlanBenefits.
        Individual Annual Max benefit string

        :param individual_annual_max: The individual_annual_max of this VisionPlanBenefits.
        :type: str
        """

        self._individual_annual_max = individual_annual_max

    @property
    def family_max_annual_max(self):
        """
        Gets the family_max_annual_max of this VisionPlanBenefits.
        Family Max Annual Max benefit string

        :return: The family_max_annual_max of this VisionPlanBenefits.
        :rtype: str
        """
        return self._family_max_annual_max

    @family_max_annual_max.setter
    def family_max_annual_max(self, family_max_annual_max):
        """
        Sets the family_max_annual_max of this VisionPlanBenefits.
        Family Max Annual Max benefit string

        :param family_max_annual_max: The family_max_annual_max of this VisionPlanBenefits.
        :type: str
        """

        self._family_max_annual_max = family_max_annual_max

    @property
    def individual_moop(self):
        """
        Gets the individual_moop of this VisionPlanBenefits.
        Individual MOOP benefit string

        :return: The individual_moop of this VisionPlanBenefits.
        :rtype: str
        """
        return self._individual_moop

    @individual_moop.setter
    def individual_moop(self, individual_moop):
        """
        Sets the individual_moop of this VisionPlanBenefits.
        Individual MOOP benefit string

        :param individual_moop: The individual_moop of this VisionPlanBenefits.
        :type: str
        """

        self._individual_moop = individual_moop

    @property
    def family_moop(self):
        """
        Gets the family_moop of this VisionPlanBenefits.
        Family MOOP benefit string

        :return: The family_moop of this VisionPlanBenefits.
        :rtype: str
        """
        return self._family_moop

    @family_moop.setter
    def family_moop(self, family_moop):
        """
        Sets the family_moop of this VisionPlanBenefits.
        Family MOOP benefit string

        :param family_moop: The family_moop of this VisionPlanBenefits.
        :type: str
        """

        self._family_moop = family_moop

    @property
    def eye_exam(self):
        """
        Gets the eye_exam of this VisionPlanBenefits.
        Eye Exam benefit string

        :return: The eye_exam of this VisionPlanBenefits.
        :rtype: str
        """
        return self._eye_exam

    @eye_exam.setter
    def eye_exam(self, eye_exam):
        """
        Sets the eye_exam of this VisionPlanBenefits.
        Eye Exam benefit string

        :param eye_exam: The eye_exam of this VisionPlanBenefits.
        :type: str
        """

        self._eye_exam = eye_exam

    @property
    def frame(self):
        """
        Gets the frame of this VisionPlanBenefits.
        Frame benefit string

        :return: The frame of this VisionPlanBenefits.
        :rtype: str
        """
        return self._frame

    @frame.setter
    def frame(self, frame):
        """
        Sets the frame of this VisionPlanBenefits.
        Frame benefit string

        :param frame: The frame of this VisionPlanBenefits.
        :type: str
        """

        self._frame = frame

    @property
    def contacts(self):
        """
        Gets the contacts of this VisionPlanBenefits.
        Contacts benefit string

        :return: The contacts of this VisionPlanBenefits.
        :rtype: str
        """
        return self._contacts

    @contacts.setter
    def contacts(self, contacts):
        """
        Sets the contacts of this VisionPlanBenefits.
        Contacts benefit string

        :param contacts: The contacts of this VisionPlanBenefits.
        :type: str
        """

        self._contacts = contacts

    @property
    def laser_vision_correction(self):
        """
        Gets the laser_vision_correction of this VisionPlanBenefits.
        Laser Vision Correction benefit string

        :return: The laser_vision_correction of this VisionPlanBenefits.
        :rtype: str
        """
        return self._laser_vision_correction

    @laser_vision_correction.setter
    def laser_vision_correction(self, laser_vision_correction):
        """
        Sets the laser_vision_correction of this VisionPlanBenefits.
        Laser Vision Correction benefit string

        :param laser_vision_correction: The laser_vision_correction of this VisionPlanBenefits.
        :type: str
        """

        self._laser_vision_correction = laser_vision_correction

    @property
    def progressive_lenses(self):
        """
        Gets the progressive_lenses of this VisionPlanBenefits.
        Progressive Lenses benefit string

        :return: The progressive_lenses of this VisionPlanBenefits.
        :rtype: str
        """
        return self._progressive_lenses

    @progressive_lenses.setter
    def progressive_lenses(self, progressive_lenses):
        """
        Sets the progressive_lenses of this VisionPlanBenefits.
        Progressive Lenses benefit string

        :param progressive_lenses: The progressive_lenses of this VisionPlanBenefits.
        :type: str
        """

        self._progressive_lenses = progressive_lenses

    @property
    def uv_lenses(self):
        """
        Gets the uv_lenses of this VisionPlanBenefits.
        UV Lenses benefit string

        :return: The uv_lenses of this VisionPlanBenefits.
        :rtype: str
        """
        return self._uv_lenses

    @uv_lenses.setter
    def uv_lenses(self, uv_lenses):
        """
        Sets the uv_lenses of this VisionPlanBenefits.
        UV Lenses benefit string

        :param uv_lenses: The uv_lenses of this VisionPlanBenefits.
        :type: str
        """

        self._uv_lenses = uv_lenses

    @property
    def scratch_resistant_coating(self):
        """
        Gets the scratch_resistant_coating of this VisionPlanBenefits.
        Scratch-Resistant Coating benefit string

        :return: The scratch_resistant_coating of this VisionPlanBenefits.
        :rtype: str
        """
        return self._scratch_resistant_coating

    @scratch_resistant_coating.setter
    def scratch_resistant_coating(self, scratch_resistant_coating):
        """
        Sets the scratch_resistant_coating of this VisionPlanBenefits.
        Scratch-Resistant Coating benefit string

        :param scratch_resistant_coating: The scratch_resistant_coating of this VisionPlanBenefits.
        :type: str
        """

        self._scratch_resistant_coating = scratch_resistant_coating

    @property
    def antireflective_coating(self):
        """
        Gets the antireflective_coating of this VisionPlanBenefits.
        Antireflective Coating benefit string

        :return: The antireflective_coating of this VisionPlanBenefits.
        :rtype: str
        """
        return self._antireflective_coating

    @antireflective_coating.setter
    def antireflective_coating(self, antireflective_coating):
        """
        Sets the antireflective_coating of this VisionPlanBenefits.
        Antireflective Coating benefit string

        :param antireflective_coating: The antireflective_coating of this VisionPlanBenefits.
        :type: str
        """

        self._antireflective_coating = antireflective_coating

    @property
    def photochromatic_single_vision(self):
        """
        Gets the photochromatic_single_vision of this VisionPlanBenefits.
        Photochromatic - Single Vision benefit string

        :return: The photochromatic_single_vision of this VisionPlanBenefits.
        :rtype: str
        """
        return self._photochromatic_single_vision

    @photochromatic_single_vision.setter
    def photochromatic_single_vision(self, photochromatic_single_vision):
        """
        Sets the photochromatic_single_vision of this VisionPlanBenefits.
        Photochromatic - Single Vision benefit string

        :param photochromatic_single_vision: The photochromatic_single_vision of this VisionPlanBenefits.
        :type: str
        """

        self._photochromatic_single_vision = photochromatic_single_vision

    @property
    def photochromatic_multifocal(self):
        """
        Gets the photochromatic_multifocal of this VisionPlanBenefits.
        Photochromatic - Mutlifocal benefit string

        :return: The photochromatic_multifocal of this VisionPlanBenefits.
        :rtype: str
        """
        return self._photochromatic_multifocal

    @photochromatic_multifocal.setter
    def photochromatic_multifocal(self, photochromatic_multifocal):
        """
        Sets the photochromatic_multifocal of this VisionPlanBenefits.
        Photochromatic - Mutlifocal benefit string

        :param photochromatic_multifocal: The photochromatic_multifocal of this VisionPlanBenefits.
        :type: str
        """

        self._photochromatic_multifocal = photochromatic_multifocal

    @property
    def polychromatic_single_vision(self):
        """
        Gets the polychromatic_single_vision of this VisionPlanBenefits.
        Polychromatic - Single Vision benefit string

        :return: The polychromatic_single_vision of this VisionPlanBenefits.
        :rtype: str
        """
        return self._polychromatic_single_vision

    @polychromatic_single_vision.setter
    def polychromatic_single_vision(self, polychromatic_single_vision):
        """
        Sets the polychromatic_single_vision of this VisionPlanBenefits.
        Polychromatic - Single Vision benefit string

        :param polychromatic_single_vision: The polychromatic_single_vision of this VisionPlanBenefits.
        :type: str
        """

        self._polychromatic_single_vision = polychromatic_single_vision

    @property
    def polychromatic_multifocal(self):
        """
        Gets the polychromatic_multifocal of this VisionPlanBenefits.
        Polychromatic - Mutlifocal benefit string

        :return: The polychromatic_multifocal of this VisionPlanBenefits.
        :rtype: str
        """
        return self._polychromatic_multifocal

    @polychromatic_multifocal.setter
    def polychromatic_multifocal(self, polychromatic_multifocal):
        """
        Sets the polychromatic_multifocal of this VisionPlanBenefits.
        Polychromatic - Mutlifocal benefit string

        :param polychromatic_multifocal: The polychromatic_multifocal of this VisionPlanBenefits.
        :type: str
        """

        self._polychromatic_multifocal = polychromatic_multifocal

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
