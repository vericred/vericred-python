# coding: utf-8

"""
    Vericred API

    Vericred's API allows you to search for Health Plans that a specific doctor
accepts.

## Getting Started

Visit our [Developer Portal](https://developers.vericred.com) to
create an account.

Once you have created an account, you can create one Application for
Production and another for our Sandbox (select the appropriate Plan when
you create the Application).

## SDKs

Our API follows standard REST conventions, so you can use any HTTP client
to integrate with us. You will likely find it easier to use one of our
[autogenerated SDKs](https://github.com/vericred/?query=vericred-),
which we make available for several common programming languages.

## Authentication

To authenticate, pass the API Key you created in the Developer Portal as
a `Vericred-Api-Key` header.

`curl -H 'Vericred-Api-Key: YOUR_KEY' "https://api.vericred.com/providers?search_term=Foo&zip_code=11215"`

## Versioning

Vericred's API default to the latest version.  However, if you need a specific
version, you can request it with an `Accept-Version` header.

The current version is `v3`.  Previous versions are `v1` and `v2`.

`curl -H 'Vericred-Api-Key: YOUR_KEY' -H 'Accept-Version: v2' "https://api.vericred.com/providers?search_term=Foo&zip_code=11215"`

## Pagination

Endpoints that accept `page` and `per_page` parameters are paginated. They expose
four additional fields that contain data about your position in the response,
namely `Total`, `Per-Page`, `Link`, and `Page` as described in [RFC-5988](https://tools.ietf.org/html/rfc5988).

For example, to display 5 results per page and view the second page of a
`GET` to `/networks`, your final request would be `GET /networks?....page=2&per_page=5`.

## Sideloading

When we return multiple levels of an object graph (e.g. `Provider`s and their `State`s
we sideload the associated data.  In this example, we would provide an Array of
`State`s and a `state_id` for each provider.  This is done primarily to reduce the
payload size since many of the `Provider`s will share a `State`

```
{
  providers: [{ id: 1, state_id: 1}, { id: 2, state_id: 1 }],
  states: [{ id: 1, code: 'NY' }]
}
```

If you need the second level of the object graph, you can just match the
corresponding id.

## Selecting specific data

All endpoints allow you to specify which fields you would like to return.
This allows you to limit the response to contain only the data you need.

For example, let's take a request that returns the following JSON by default

```
{
  provider: {
    id: 1,
    name: 'John',
    phone: '1234567890',
    field_we_dont_care_about: 'value_we_dont_care_about'
  },
  states: [{
    id: 1,
    name: 'New York',
    code: 'NY',
    field_we_dont_care_about: 'value_we_dont_care_about'
  }]
}
```

To limit our results to only return the fields we care about, we specify the
`select` query string parameter for the corresponding fields in the JSON
document.

In this case, we want to select `name` and `phone` from the `provider` key,
so we would add the parameters `select=provider.name,provider.phone`.
We also want the `name` and `code` from the `states` key, so we would
add the parameters `select=states.name,states.code`.  The id field of
each document is always returned whether or not it is requested.

Our final request would be `GET /providers/12345?select=provider.name,provider.phone,states.name,states.code`

The response would be

```
{
  provider: {
    id: 1,
    name: 'John',
    phone: '1234567890'
  },
  states: [{
    id: 1,
    name: 'New York',
    code: 'NY'
  }]
}
```

## Benefits summary format
Benefit cost-share strings are formatted to capture:
 * Network tiers
 * Compound or conditional cost-share
 * Limits on the cost-share
 * Benefit-specific maximum out-of-pocket costs

**Example #1**
As an example, we would represent [this Summary of Benefits &amp; Coverage](https://s3.amazonaws.com/vericred-data/SBC/2017/33602TX0780032.pdf) as:

* **Hospital stay facility fees**:
  - Network Provider: `$400 copay/admit plus 20% coinsurance`
  - Out-of-Network Provider: `$1,500 copay/admit plus 50% coinsurance`
  - Vericred's format for this benefit: `In-Network: $400 before deductible then 20% after deductible / Out-of-Network: $1,500 before deductible then 50% after deductible`

* **Rehabilitation services:**
  - Network Provider: `20% coinsurance`
  - Out-of-Network Provider: `50% coinsurance`
  - Limitations & Exceptions: `35 visit maximum per benefit period combined with Chiropractic care.`
  - Vericred's format for this benefit: `In-Network: 20% after deductible / Out-of-Network: 50% after deductible | limit: 35 visit(s) per Benefit Period`

**Example #2**
In [this other Summary of Benefits &amp; Coverage](https://s3.amazonaws.com/vericred-data/SBC/2017/40733CA0110568.pdf), the **specialty_drugs** cost-share has a maximum out-of-pocket for in-network pharmacies.
* **Specialty drugs:**
  - Network Provider: `40% coinsurance up to a $500 maximum for up to a 30 day supply`
  - Out-of-Network Provider `Not covered`
  - Vericred's format for this benefit: `In-Network: 40% after deductible, up to $500 per script / Out-of-Network: 100%`

**BNF**

Here's a description of the benefits summary string, represented as a context-free grammar:

```
root                      ::= coverage

coverage                  ::= (simple_coverage | tiered_coverage) (space pipe space coverage_modifier)?
tiered_coverage           ::= tier (space slash space tier)*
tier                      ::= tier_name colon space (tier_coverage | not_applicable)
tier_coverage             ::= simple_coverage (space (then | or | and) space simple_coverage)* tier_limitation?
simple_coverage           ::= (pre_coverage_limitation space)? coverage_amount (space post_coverage_limitation)? (comma? space coverage_condition)?
coverage_modifier         ::= limit_condition colon space (((simple_coverage | simple_limitation) (semicolon space see_carrier_documentation)?) | see_carrier_documentation | waived_if_admitted | shared_across_tiers)
waived_if_admitted        ::= ("copay" space)? "waived if admitted"
simple_limitation         ::= pre_coverage_limitation space "copay applies"
tier_name                 ::= "In-Network-Tier-2" | "Out-of-Network" | "In-Network"
limit_condition           ::= "limit" | "condition"
tier_limitation           ::= comma space "up to" space (currency | (integer space time_unit plural?)) (space post_coverage_limitation)?
coverage_amount           ::= currency | unlimited | included | unknown | percentage | (digits space (treatment_unit | time_unit) plural?)
pre_coverage_limitation   ::= first space digits space time_unit plural?
post_coverage_limitation  ::= (((then space currency) | "per condition") space)? "per" space (treatment_unit | (integer space time_unit) | time_unit) plural?
coverage_condition        ::= ("before deductible" | "after deductible" | "penalty" | allowance | "in-state" | "out-of-state") (space allowance)?
allowance                 ::= upto_allowance | after_allowance
upto_allowance            ::= "up to" space (currency space)? "allowance"
after_allowance           ::= "after" space (currency space)? "allowance"
see_carrier_documentation ::= "see carrier documentation for more information"
shared_across_tiers       ::= "shared across all tiers"
unknown                   ::= "unknown"
unlimited                 ::= /[uU]nlimited/
included                  ::= /[iI]ncluded in [mM]edical/
time_unit                 ::= /[hH]our/ | (((/[cC]alendar/ | /[cC]ontract/) space)? /[yY]ear/) | /[mM]onth/ | /[dD]ay/ | /[wW]eek/ | /[vV]isit/ | /[lL]ifetime/ | ((((/[bB]enefit/ plural?) | /[eE]ligibility/) space)? /[pP]eriod/)
treatment_unit            ::= /[pP]erson/ | /[gG]roup/ | /[cC]ondition/ | /[sS]cript/ | /[vV]isit/ | /[eE]xam/ | /[iI]tem/ | /[sS]tay/ | /[tT]reatment/ | /[aA]dmission/ | /[eE]pisode/
comma                     ::= ","
colon                     ::= ":"
semicolon                 ::= ";"
pipe                      ::= "|"
slash                     ::= "/"
plural                    ::= "(s)" | "s"
then                      ::= "then" | ("," space) | space
or                        ::= "or"
and                       ::= "and"
not_applicable            ::= "Not Applicable" | "N/A" | "NA"
first                     ::= "first"
currency                  ::= "$" number
percentage                ::= number "%"
number                    ::= float | integer
float                     ::= digits "." digits
integer                   ::= /[0-9]/+ (comma_int | under_int)*
comma_int                 ::= ("," /[0-9]/*3) !"_"
under_int                 ::= ("_" /[0-9]/*3) !","
digits                    ::= /[0-9]/+ ("_" /[0-9]/+)*
space                     ::= /[ \t]/+
```



    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class DentalPlanBenefits(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, individual_deductible=None, family_deductible=None, individual_annual_max=None, family_max_annual_max=None, individual_moop=None, family_moop=None, office_visits=None, radiograph_bitewings=None, radiograph_other=None, fluoride_treatment=None, space_maintainers=None, prophylaxis_cleaning=None, sealant=None, fillings_amalgram=None, fillings_composite=None, emergency_treatment=None, restorative=None, surgery_anesthesia=None, surgery_extraction=None, endodontics=None, periodontics=None, orthodontics_adult=None, orthodontics_child=None):
        """
        DentalPlanBenefits - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'individual_deductible': 'str',
            'family_deductible': 'str',
            'individual_annual_max': 'str',
            'family_max_annual_max': 'str',
            'individual_moop': 'str',
            'family_moop': 'str',
            'office_visits': 'str',
            'radiograph_bitewings': 'str',
            'radiograph_other': 'str',
            'fluoride_treatment': 'str',
            'space_maintainers': 'str',
            'prophylaxis_cleaning': 'str',
            'sealant': 'str',
            'fillings_amalgram': 'str',
            'fillings_composite': 'str',
            'emergency_treatment': 'str',
            'restorative': 'str',
            'surgery_anesthesia': 'str',
            'surgery_extraction': 'str',
            'endodontics': 'str',
            'periodontics': 'str',
            'orthodontics_adult': 'str',
            'orthodontics_child': 'str'
        }

        self.attribute_map = {
            'individual_deductible': 'individual_deductible',
            'family_deductible': 'family_deductible',
            'individual_annual_max': 'individual_annual_max',
            'family_max_annual_max': 'family_max_annual_max',
            'individual_moop': 'individual_moop',
            'family_moop': 'family_moop',
            'office_visits': 'office_visits',
            'radiograph_bitewings': 'radiograph_bitewings',
            'radiograph_other': 'radiograph_other',
            'fluoride_treatment': 'fluoride_treatment',
            'space_maintainers': 'space_maintainers',
            'prophylaxis_cleaning': 'prophylaxis_cleaning',
            'sealant': 'sealant',
            'fillings_amalgram': 'fillings_amalgram',
            'fillings_composite': 'fillings_composite',
            'emergency_treatment': 'emergency_treatment',
            'restorative': 'restorative',
            'surgery_anesthesia': 'surgery_anesthesia',
            'surgery_extraction': 'surgery_extraction',
            'endodontics': 'endodontics',
            'periodontics': 'periodontics',
            'orthodontics_adult': 'orthodontics_adult',
            'orthodontics_child': 'orthodontics_child'
        }

        self._individual_deductible = individual_deductible
        self._family_deductible = family_deductible
        self._individual_annual_max = individual_annual_max
        self._family_max_annual_max = family_max_annual_max
        self._individual_moop = individual_moop
        self._family_moop = family_moop
        self._office_visits = office_visits
        self._radiograph_bitewings = radiograph_bitewings
        self._radiograph_other = radiograph_other
        self._fluoride_treatment = fluoride_treatment
        self._space_maintainers = space_maintainers
        self._prophylaxis_cleaning = prophylaxis_cleaning
        self._sealant = sealant
        self._fillings_amalgram = fillings_amalgram
        self._fillings_composite = fillings_composite
        self._emergency_treatment = emergency_treatment
        self._restorative = restorative
        self._surgery_anesthesia = surgery_anesthesia
        self._surgery_extraction = surgery_extraction
        self._endodontics = endodontics
        self._periodontics = periodontics
        self._orthodontics_adult = orthodontics_adult
        self._orthodontics_child = orthodontics_child


    @property
    def individual_deductible(self):
        """
        Gets the individual_deductible of this DentalPlanBenefits.
        Individual Deductible benefit string

        :return: The individual_deductible of this DentalPlanBenefits.
        :rtype: str
        """
        return self._individual_deductible

    @individual_deductible.setter
    def individual_deductible(self, individual_deductible):
        """
        Sets the individual_deductible of this DentalPlanBenefits.
        Individual Deductible benefit string

        :param individual_deductible: The individual_deductible of this DentalPlanBenefits.
        :type: str
        """

        self._individual_deductible = individual_deductible

    @property
    def family_deductible(self):
        """
        Gets the family_deductible of this DentalPlanBenefits.
        Family Deductible benefit string

        :return: The family_deductible of this DentalPlanBenefits.
        :rtype: str
        """
        return self._family_deductible

    @family_deductible.setter
    def family_deductible(self, family_deductible):
        """
        Sets the family_deductible of this DentalPlanBenefits.
        Family Deductible benefit string

        :param family_deductible: The family_deductible of this DentalPlanBenefits.
        :type: str
        """

        self._family_deductible = family_deductible

    @property
    def individual_annual_max(self):
        """
        Gets the individual_annual_max of this DentalPlanBenefits.
        Individual Annual Max benefit string

        :return: The individual_annual_max of this DentalPlanBenefits.
        :rtype: str
        """
        return self._individual_annual_max

    @individual_annual_max.setter
    def individual_annual_max(self, individual_annual_max):
        """
        Sets the individual_annual_max of this DentalPlanBenefits.
        Individual Annual Max benefit string

        :param individual_annual_max: The individual_annual_max of this DentalPlanBenefits.
        :type: str
        """

        self._individual_annual_max = individual_annual_max

    @property
    def family_max_annual_max(self):
        """
        Gets the family_max_annual_max of this DentalPlanBenefits.
        Family Max Annual Max benefit string

        :return: The family_max_annual_max of this DentalPlanBenefits.
        :rtype: str
        """
        return self._family_max_annual_max

    @family_max_annual_max.setter
    def family_max_annual_max(self, family_max_annual_max):
        """
        Sets the family_max_annual_max of this DentalPlanBenefits.
        Family Max Annual Max benefit string

        :param family_max_annual_max: The family_max_annual_max of this DentalPlanBenefits.
        :type: str
        """

        self._family_max_annual_max = family_max_annual_max

    @property
    def individual_moop(self):
        """
        Gets the individual_moop of this DentalPlanBenefits.
        Individual MOOP benefit string

        :return: The individual_moop of this DentalPlanBenefits.
        :rtype: str
        """
        return self._individual_moop

    @individual_moop.setter
    def individual_moop(self, individual_moop):
        """
        Sets the individual_moop of this DentalPlanBenefits.
        Individual MOOP benefit string

        :param individual_moop: The individual_moop of this DentalPlanBenefits.
        :type: str
        """

        self._individual_moop = individual_moop

    @property
    def family_moop(self):
        """
        Gets the family_moop of this DentalPlanBenefits.
        Family MOOP benefit string

        :return: The family_moop of this DentalPlanBenefits.
        :rtype: str
        """
        return self._family_moop

    @family_moop.setter
    def family_moop(self, family_moop):
        """
        Sets the family_moop of this DentalPlanBenefits.
        Family MOOP benefit string

        :param family_moop: The family_moop of this DentalPlanBenefits.
        :type: str
        """

        self._family_moop = family_moop

    @property
    def office_visits(self):
        """
        Gets the office_visits of this DentalPlanBenefits.
        Office Visits benefit string

        :return: The office_visits of this DentalPlanBenefits.
        :rtype: str
        """
        return self._office_visits

    @office_visits.setter
    def office_visits(self, office_visits):
        """
        Sets the office_visits of this DentalPlanBenefits.
        Office Visits benefit string

        :param office_visits: The office_visits of this DentalPlanBenefits.
        :type: str
        """

        self._office_visits = office_visits

    @property
    def radiograph_bitewings(self):
        """
        Gets the radiograph_bitewings of this DentalPlanBenefits.
        Radiograph - Bitewings benefit string

        :return: The radiograph_bitewings of this DentalPlanBenefits.
        :rtype: str
        """
        return self._radiograph_bitewings

    @radiograph_bitewings.setter
    def radiograph_bitewings(self, radiograph_bitewings):
        """
        Sets the radiograph_bitewings of this DentalPlanBenefits.
        Radiograph - Bitewings benefit string

        :param radiograph_bitewings: The radiograph_bitewings of this DentalPlanBenefits.
        :type: str
        """

        self._radiograph_bitewings = radiograph_bitewings

    @property
    def radiograph_other(self):
        """
        Gets the radiograph_other of this DentalPlanBenefits.
        Radiograph - Other benefit string

        :return: The radiograph_other of this DentalPlanBenefits.
        :rtype: str
        """
        return self._radiograph_other

    @radiograph_other.setter
    def radiograph_other(self, radiograph_other):
        """
        Sets the radiograph_other of this DentalPlanBenefits.
        Radiograph - Other benefit string

        :param radiograph_other: The radiograph_other of this DentalPlanBenefits.
        :type: str
        """

        self._radiograph_other = radiograph_other

    @property
    def fluoride_treatment(self):
        """
        Gets the fluoride_treatment of this DentalPlanBenefits.
        Fluoride Treatment benefit string

        :return: The fluoride_treatment of this DentalPlanBenefits.
        :rtype: str
        """
        return self._fluoride_treatment

    @fluoride_treatment.setter
    def fluoride_treatment(self, fluoride_treatment):
        """
        Sets the fluoride_treatment of this DentalPlanBenefits.
        Fluoride Treatment benefit string

        :param fluoride_treatment: The fluoride_treatment of this DentalPlanBenefits.
        :type: str
        """

        self._fluoride_treatment = fluoride_treatment

    @property
    def space_maintainers(self):
        """
        Gets the space_maintainers of this DentalPlanBenefits.
        Space Maintainers benefit string

        :return: The space_maintainers of this DentalPlanBenefits.
        :rtype: str
        """
        return self._space_maintainers

    @space_maintainers.setter
    def space_maintainers(self, space_maintainers):
        """
        Sets the space_maintainers of this DentalPlanBenefits.
        Space Maintainers benefit string

        :param space_maintainers: The space_maintainers of this DentalPlanBenefits.
        :type: str
        """

        self._space_maintainers = space_maintainers

    @property
    def prophylaxis_cleaning(self):
        """
        Gets the prophylaxis_cleaning of this DentalPlanBenefits.
        Prophylaxis Cleaning benefit string

        :return: The prophylaxis_cleaning of this DentalPlanBenefits.
        :rtype: str
        """
        return self._prophylaxis_cleaning

    @prophylaxis_cleaning.setter
    def prophylaxis_cleaning(self, prophylaxis_cleaning):
        """
        Sets the prophylaxis_cleaning of this DentalPlanBenefits.
        Prophylaxis Cleaning benefit string

        :param prophylaxis_cleaning: The prophylaxis_cleaning of this DentalPlanBenefits.
        :type: str
        """

        self._prophylaxis_cleaning = prophylaxis_cleaning

    @property
    def sealant(self):
        """
        Gets the sealant of this DentalPlanBenefits.
        Sealant benefit string

        :return: The sealant of this DentalPlanBenefits.
        :rtype: str
        """
        return self._sealant

    @sealant.setter
    def sealant(self, sealant):
        """
        Sets the sealant of this DentalPlanBenefits.
        Sealant benefit string

        :param sealant: The sealant of this DentalPlanBenefits.
        :type: str
        """

        self._sealant = sealant

    @property
    def fillings_amalgram(self):
        """
        Gets the fillings_amalgram of this DentalPlanBenefits.
        Fillings - Amalgram benefit string

        :return: The fillings_amalgram of this DentalPlanBenefits.
        :rtype: str
        """
        return self._fillings_amalgram

    @fillings_amalgram.setter
    def fillings_amalgram(self, fillings_amalgram):
        """
        Sets the fillings_amalgram of this DentalPlanBenefits.
        Fillings - Amalgram benefit string

        :param fillings_amalgram: The fillings_amalgram of this DentalPlanBenefits.
        :type: str
        """

        self._fillings_amalgram = fillings_amalgram

    @property
    def fillings_composite(self):
        """
        Gets the fillings_composite of this DentalPlanBenefits.
        Fillings - Composite benefit string

        :return: The fillings_composite of this DentalPlanBenefits.
        :rtype: str
        """
        return self._fillings_composite

    @fillings_composite.setter
    def fillings_composite(self, fillings_composite):
        """
        Sets the fillings_composite of this DentalPlanBenefits.
        Fillings - Composite benefit string

        :param fillings_composite: The fillings_composite of this DentalPlanBenefits.
        :type: str
        """

        self._fillings_composite = fillings_composite

    @property
    def emergency_treatment(self):
        """
        Gets the emergency_treatment of this DentalPlanBenefits.
        Emergency Treatment benefit string

        :return: The emergency_treatment of this DentalPlanBenefits.
        :rtype: str
        """
        return self._emergency_treatment

    @emergency_treatment.setter
    def emergency_treatment(self, emergency_treatment):
        """
        Sets the emergency_treatment of this DentalPlanBenefits.
        Emergency Treatment benefit string

        :param emergency_treatment: The emergency_treatment of this DentalPlanBenefits.
        :type: str
        """

        self._emergency_treatment = emergency_treatment

    @property
    def restorative(self):
        """
        Gets the restorative of this DentalPlanBenefits.
        Restorative benefit string

        :return: The restorative of this DentalPlanBenefits.
        :rtype: str
        """
        return self._restorative

    @restorative.setter
    def restorative(self, restorative):
        """
        Sets the restorative of this DentalPlanBenefits.
        Restorative benefit string

        :param restorative: The restorative of this DentalPlanBenefits.
        :type: str
        """

        self._restorative = restorative

    @property
    def surgery_anesthesia(self):
        """
        Gets the surgery_anesthesia of this DentalPlanBenefits.
        Surgery - Anesthesia benefit string

        :return: The surgery_anesthesia of this DentalPlanBenefits.
        :rtype: str
        """
        return self._surgery_anesthesia

    @surgery_anesthesia.setter
    def surgery_anesthesia(self, surgery_anesthesia):
        """
        Sets the surgery_anesthesia of this DentalPlanBenefits.
        Surgery - Anesthesia benefit string

        :param surgery_anesthesia: The surgery_anesthesia of this DentalPlanBenefits.
        :type: str
        """

        self._surgery_anesthesia = surgery_anesthesia

    @property
    def surgery_extraction(self):
        """
        Gets the surgery_extraction of this DentalPlanBenefits.
        Surgery - Extraction benefit string

        :return: The surgery_extraction of this DentalPlanBenefits.
        :rtype: str
        """
        return self._surgery_extraction

    @surgery_extraction.setter
    def surgery_extraction(self, surgery_extraction):
        """
        Sets the surgery_extraction of this DentalPlanBenefits.
        Surgery - Extraction benefit string

        :param surgery_extraction: The surgery_extraction of this DentalPlanBenefits.
        :type: str
        """

        self._surgery_extraction = surgery_extraction

    @property
    def endodontics(self):
        """
        Gets the endodontics of this DentalPlanBenefits.
        Endodontics benefit string

        :return: The endodontics of this DentalPlanBenefits.
        :rtype: str
        """
        return self._endodontics

    @endodontics.setter
    def endodontics(self, endodontics):
        """
        Sets the endodontics of this DentalPlanBenefits.
        Endodontics benefit string

        :param endodontics: The endodontics of this DentalPlanBenefits.
        :type: str
        """

        self._endodontics = endodontics

    @property
    def periodontics(self):
        """
        Gets the periodontics of this DentalPlanBenefits.
        Periodontics benefit string

        :return: The periodontics of this DentalPlanBenefits.
        :rtype: str
        """
        return self._periodontics

    @periodontics.setter
    def periodontics(self, periodontics):
        """
        Sets the periodontics of this DentalPlanBenefits.
        Periodontics benefit string

        :param periodontics: The periodontics of this DentalPlanBenefits.
        :type: str
        """

        self._periodontics = periodontics

    @property
    def orthodontics_adult(self):
        """
        Gets the orthodontics_adult of this DentalPlanBenefits.
        Orthodontics - Adult benefit string

        :return: The orthodontics_adult of this DentalPlanBenefits.
        :rtype: str
        """
        return self._orthodontics_adult

    @orthodontics_adult.setter
    def orthodontics_adult(self, orthodontics_adult):
        """
        Sets the orthodontics_adult of this DentalPlanBenefits.
        Orthodontics - Adult benefit string

        :param orthodontics_adult: The orthodontics_adult of this DentalPlanBenefits.
        :type: str
        """

        self._orthodontics_adult = orthodontics_adult

    @property
    def orthodontics_child(self):
        """
        Gets the orthodontics_child of this DentalPlanBenefits.
        Orthodontics - Child benefit string

        :return: The orthodontics_child of this DentalPlanBenefits.
        :rtype: str
        """
        return self._orthodontics_child

    @orthodontics_child.setter
    def orthodontics_child(self, orthodontics_child):
        """
        Sets the orthodontics_child of this DentalPlanBenefits.
        Orthodontics - Child benefit string

        :param orthodontics_child: The orthodontics_child of this DentalPlanBenefits.
        :type: str
        """

        self._orthodontics_child = orthodontics_child

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
