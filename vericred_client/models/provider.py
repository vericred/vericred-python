# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class Provider(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Provider - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'accepting_change_of_payor_patients': 'bool',
            'accepting_medicaid_patients': 'bool',
            'accepting_medicare_patients': 'bool',
            'accepting_private_patients': 'bool',
            'accepting_referral_patients': 'bool',
            'city': 'str',
            'email': 'str',
            'gender': 'str',
            'first_name': 'str',
            'id': 'int',
            'last_name': 'str',
            'middle_name': 'str',
            'personal_phone': 'str',
            'phone': 'str',
            'presentation_name': 'str',
            'specialty': 'str',
            'state': 'str',
            'state_id': 'int',
            'street_line_1': 'str',
            'street_line_2': 'str',
            'suffix': 'str',
            'title': 'str',
            'type': 'str',
            'zip_code': 'str'
        }

        self.attribute_map = {
            'accepting_change_of_payor_patients': 'accepting_change_of_payor_patients',
            'accepting_medicaid_patients': 'accepting_medicaid_patients',
            'accepting_medicare_patients': 'accepting_medicare_patients',
            'accepting_private_patients': 'accepting_private_patients',
            'accepting_referral_patients': 'accepting_referral_patients',
            'city': 'city',
            'email': 'email',
            'gender': 'gender',
            'first_name': 'first_name',
            'id': 'id',
            'last_name': 'last_name',
            'middle_name': 'middle_name',
            'personal_phone': 'personal_phone',
            'phone': 'phone',
            'presentation_name': 'presentation_name',
            'specialty': 'specialty',
            'state': 'state',
            'state_id': 'state_id',
            'street_line_1': 'street_line_1',
            'street_line_2': 'street_line_2',
            'suffix': 'suffix',
            'title': 'title',
            'type': 'type',
            'zip_code': 'zip_code'
        }

        self._accepting_change_of_payor_patients = None
        self._accepting_medicaid_patients = None
        self._accepting_medicare_patients = None
        self._accepting_private_patients = None
        self._accepting_referral_patients = None
        self._city = None
        self._email = None
        self._gender = None
        self._first_name = None
        self._id = None
        self._last_name = None
        self._middle_name = None
        self._personal_phone = None
        self._phone = None
        self._presentation_name = None
        self._specialty = None
        self._state = None
        self._state_id = None
        self._street_line_1 = None
        self._street_line_2 = None
        self._suffix = None
        self._title = None
        self._type = None
        self._zip_code = None

    @property
    def accepting_change_of_payor_patients(self):
        """
        Gets the accepting_change_of_payor_patients of this Provider.
        Is this provider accepting patients with a change of insurance?

        :return: The accepting_change_of_payor_patients of this Provider.
        :rtype: bool
        """
        return self._accepting_change_of_payor_patients

    @accepting_change_of_payor_patients.setter
    def accepting_change_of_payor_patients(self, accepting_change_of_payor_patients):
        """
        Sets the accepting_change_of_payor_patients of this Provider.
        Is this provider accepting patients with a change of insurance?

        :param accepting_change_of_payor_patients: The accepting_change_of_payor_patients of this Provider.
        :type: bool
        """
        self._accepting_change_of_payor_patients = accepting_change_of_payor_patients

    @property
    def accepting_medicaid_patients(self):
        """
        Gets the accepting_medicaid_patients of this Provider.
        Is this provider accepting new Medicaid patients?

        :return: The accepting_medicaid_patients of this Provider.
        :rtype: bool
        """
        return self._accepting_medicaid_patients

    @accepting_medicaid_patients.setter
    def accepting_medicaid_patients(self, accepting_medicaid_patients):
        """
        Sets the accepting_medicaid_patients of this Provider.
        Is this provider accepting new Medicaid patients?

        :param accepting_medicaid_patients: The accepting_medicaid_patients of this Provider.
        :type: bool
        """
        self._accepting_medicaid_patients = accepting_medicaid_patients

    @property
    def accepting_medicare_patients(self):
        """
        Gets the accepting_medicare_patients of this Provider.
        Is this provider accepting new Medicare patients?

        :return: The accepting_medicare_patients of this Provider.
        :rtype: bool
        """
        return self._accepting_medicare_patients

    @accepting_medicare_patients.setter
    def accepting_medicare_patients(self, accepting_medicare_patients):
        """
        Sets the accepting_medicare_patients of this Provider.
        Is this provider accepting new Medicare patients?

        :param accepting_medicare_patients: The accepting_medicare_patients of this Provider.
        :type: bool
        """
        self._accepting_medicare_patients = accepting_medicare_patients

    @property
    def accepting_private_patients(self):
        """
        Gets the accepting_private_patients of this Provider.
        Is this provider accepting new patients with private insurance?

        :return: The accepting_private_patients of this Provider.
        :rtype: bool
        """
        return self._accepting_private_patients

    @accepting_private_patients.setter
    def accepting_private_patients(self, accepting_private_patients):
        """
        Sets the accepting_private_patients of this Provider.
        Is this provider accepting new patients with private insurance?

        :param accepting_private_patients: The accepting_private_patients of this Provider.
        :type: bool
        """
        self._accepting_private_patients = accepting_private_patients

    @property
    def accepting_referral_patients(self):
        """
        Gets the accepting_referral_patients of this Provider.
        Is this provider accepting new patients via referrals?

        :return: The accepting_referral_patients of this Provider.
        :rtype: bool
        """
        return self._accepting_referral_patients

    @accepting_referral_patients.setter
    def accepting_referral_patients(self, accepting_referral_patients):
        """
        Sets the accepting_referral_patients of this Provider.
        Is this provider accepting new patients via referrals?

        :param accepting_referral_patients: The accepting_referral_patients of this Provider.
        :type: bool
        """
        self._accepting_referral_patients = accepting_referral_patients

    @property
    def city(self):
        """
        Gets the city of this Provider.
        City name (e.g. Springfield).

        :return: The city of this Provider.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """
        Sets the city of this Provider.
        City name (e.g. Springfield).

        :param city: The city of this Provider.
        :type: str
        """
        self._city = city

    @property
    def email(self):
        """
        Gets the email of this Provider.
        Primary email address to contact the provider.

        :return: The email of this Provider.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this Provider.
        Primary email address to contact the provider.

        :param email: The email of this Provider.
        :type: str
        """
        self._email = email

    @property
    def gender(self):
        """
        Gets the gender of this Provider.
        Provider's gender (M or F)

        :return: The gender of this Provider.
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """
        Sets the gender of this Provider.
        Provider's gender (M or F)

        :param gender: The gender of this Provider.
        :type: str
        """
        self._gender = gender

    @property
    def first_name(self):
        """
        Gets the first_name of this Provider.
        Given name for the provider.

        :return: The first_name of this Provider.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """
        Sets the first_name of this Provider.
        Given name for the provider.

        :param first_name: The first_name of this Provider.
        :type: str
        """
        self._first_name = first_name

    @property
    def id(self):
        """
        Gets the id of this Provider.
        National Provider Index (NPI) number

        :return: The id of this Provider.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Provider.
        National Provider Index (NPI) number

        :param id: The id of this Provider.
        :type: int
        """
        self._id = id

    @property
    def last_name(self):
        """
        Gets the last_name of this Provider.
        Family name for the provider.

        :return: The last_name of this Provider.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """
        Sets the last_name of this Provider.
        Family name for the provider.

        :param last_name: The last_name of this Provider.
        :type: str
        """
        self._last_name = last_name

    @property
    def middle_name(self):
        """
        Gets the middle_name of this Provider.
        Middle name for the provider.

        :return: The middle_name of this Provider.
        :rtype: str
        """
        return self._middle_name

    @middle_name.setter
    def middle_name(self, middle_name):
        """
        Sets the middle_name of this Provider.
        Middle name for the provider.

        :param middle_name: The middle_name of this Provider.
        :type: str
        """
        self._middle_name = middle_name

    @property
    def personal_phone(self):
        """
        Gets the personal_phone of this Provider.
        Personal contact phone for the provider.

        :return: The personal_phone of this Provider.
        :rtype: str
        """
        return self._personal_phone

    @personal_phone.setter
    def personal_phone(self, personal_phone):
        """
        Sets the personal_phone of this Provider.
        Personal contact phone for the provider.

        :param personal_phone: The personal_phone of this Provider.
        :type: str
        """
        self._personal_phone = personal_phone

    @property
    def phone(self):
        """
        Gets the phone of this Provider.
        Office phone for the provider

        :return: The phone of this Provider.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """
        Sets the phone of this Provider.
        Office phone for the provider

        :param phone: The phone of this Provider.
        :type: str
        """
        self._phone = phone

    @property
    def presentation_name(self):
        """
        Gets the presentation_name of this Provider.
        Preferred name for display (e.g. Dr. Francis White may prefer Dr. Frank White)

        :return: The presentation_name of this Provider.
        :rtype: str
        """
        return self._presentation_name

    @presentation_name.setter
    def presentation_name(self, presentation_name):
        """
        Sets the presentation_name of this Provider.
        Preferred name for display (e.g. Dr. Francis White may prefer Dr. Frank White)

        :param presentation_name: The presentation_name of this Provider.
        :type: str
        """
        self._presentation_name = presentation_name

    @property
    def specialty(self):
        """
        Gets the specialty of this Provider.
        Name of the primary Specialty

        :return: The specialty of this Provider.
        :rtype: str
        """
        return self._specialty

    @specialty.setter
    def specialty(self, specialty):
        """
        Sets the specialty of this Provider.
        Name of the primary Specialty

        :param specialty: The specialty of this Provider.
        :type: str
        """
        self._specialty = specialty

    @property
    def state(self):
        """
        Gets the state of this Provider.
        State code for the provider's address (e.g. NY).

        :return: The state of this Provider.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this Provider.
        State code for the provider's address (e.g. NY).

        :param state: The state of this Provider.
        :type: str
        """
        self._state = state

    @property
    def state_id(self):
        """
        Gets the state_id of this Provider.
        Foreign key to States

        :return: The state_id of this Provider.
        :rtype: int
        """
        return self._state_id

    @state_id.setter
    def state_id(self, state_id):
        """
        Sets the state_id of this Provider.
        Foreign key to States

        :param state_id: The state_id of this Provider.
        :type: int
        """
        self._state_id = state_id

    @property
    def street_line_1(self):
        """
        Gets the street_line_1 of this Provider.
        First line of the provider's street address.

        :return: The street_line_1 of this Provider.
        :rtype: str
        """
        return self._street_line_1

    @street_line_1.setter
    def street_line_1(self, street_line_1):
        """
        Sets the street_line_1 of this Provider.
        First line of the provider's street address.

        :param street_line_1: The street_line_1 of this Provider.
        :type: str
        """
        self._street_line_1 = street_line_1

    @property
    def street_line_2(self):
        """
        Gets the street_line_2 of this Provider.
        Second line of the provider's street address.

        :return: The street_line_2 of this Provider.
        :rtype: str
        """
        return self._street_line_2

    @street_line_2.setter
    def street_line_2(self, street_line_2):
        """
        Sets the street_line_2 of this Provider.
        Second line of the provider's street address.

        :param street_line_2: The street_line_2 of this Provider.
        :type: str
        """
        self._street_line_2 = street_line_2

    @property
    def suffix(self):
        """
        Gets the suffix of this Provider.
        Suffix for the provider's name (e.g. Jr)

        :return: The suffix of this Provider.
        :rtype: str
        """
        return self._suffix

    @suffix.setter
    def suffix(self, suffix):
        """
        Sets the suffix of this Provider.
        Suffix for the provider's name (e.g. Jr)

        :param suffix: The suffix of this Provider.
        :type: str
        """
        self._suffix = suffix

    @property
    def title(self):
        """
        Gets the title of this Provider.
        Professional title for the provider (e.g. Dr).

        :return: The title of this Provider.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """
        Sets the title of this Provider.
        Professional title for the provider (e.g. Dr).

        :param title: The title of this Provider.
        :type: str
        """
        self._title = title

    @property
    def type(self):
        """
        Gets the type of this Provider.
        Type of NPI number (individual provider vs organization).

        :return: The type of this Provider.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this Provider.
        Type of NPI number (individual provider vs organization).

        :param type: The type of this Provider.
        :type: str
        """
        self._type = type

    @property
    def zip_code(self):
        """
        Gets the zip_code of this Provider.
        Postal code for the provider's address (e.g. 11215)

        :return: The zip_code of this Provider.
        :rtype: str
        """
        return self._zip_code

    @zip_code.setter
    def zip_code(self, zip_code):
        """
        Sets the zip_code of this Provider.
        Postal code for the provider's address (e.g. 11215)

        :param zip_code: The zip_code of this Provider.
        :type: str
        """
        self._zip_code = zip_code

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

