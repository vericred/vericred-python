# coding: utf-8

"""
    Vericred API

    Vericred's API allows you to search for Health Plans that a specific doctor
accepts.

## Getting Started

Visit our [Developer Portal](https://developers.vericred.com) to
create an account.

Once you have created an account, you can create one Application for
Production and another for our Sandbox (select the appropriate Plan when
you create the Application).

## SDKs

Our API follows standard REST conventions, so you can use any HTTP client
to integrate with us. You will likely find it easier to use one of our
[autogenerated SDKs](https://github.com/vericred/?query=vericred-),
which we make available for several common programming languages.

## Authentication

To authenticate, pass the API Key you created in the Developer Portal as
a `Vericred-Api-Key` header.

`curl -H 'Vericred-Api-Key: YOUR_KEY' "https://api.vericred.com/providers?search_term=Foo&zip_code=11215"`

## Versioning

Vericred's API default to the latest version.  However, if you need a specific
version, you can request it with an `Accept-Version` header.

The current version is `v3`.  Previous versions are `v1` and `v2`.

`curl -H 'Vericred-Api-Key: YOUR_KEY' -H 'Accept-Version: v2' "https://api.vericred.com/providers?search_term=Foo&zip_code=11215"`

## Pagination

Endpoints that accept `page` and `per_page` parameters are paginated. They expose
four additional fields that contain data about your position in the response,
namely `Total`, `Per-Page`, `Link`, and `Page` as described in [RFC-5988](https://tools.ietf.org/html/rfc5988).

For example, to display 5 results per page and view the second page of a
`GET` to `/networks`, your final request would be `GET /networks?....page=2&per_page=5`.

## Sideloading

When we return multiple levels of an object graph (e.g. `Provider`s and their `State`s
we sideload the associated data.  In this example, we would provide an Array of
`State`s and a `state_id` for each provider.  This is done primarily to reduce the
payload size since many of the `Provider`s will share a `State`

```
{
  providers: [{ id: 1, state_id: 1}, { id: 2, state_id: 1 }],
  states: [{ id: 1, code: 'NY' }]
}
```

If you need the second level of the object graph, you can just match the
corresponding id.

## Selecting specific data

All endpoints allow you to specify which fields you would like to return.
This allows you to limit the response to contain only the data you need.

For example, let's take a request that returns the following JSON by default

```
{
  provider: {
    id: 1,
    name: 'John',
    phone: '1234567890',
    field_we_dont_care_about: 'value_we_dont_care_about'
  },
  states: [{
    id: 1,
    name: 'New York',
    code: 'NY',
    field_we_dont_care_about: 'value_we_dont_care_about'
  }]
}
```

To limit our results to only return the fields we care about, we specify the
`select` query string parameter for the corresponding fields in the JSON
document.

In this case, we want to select `name` and `phone` from the `provider` key,
so we would add the parameters `select=provider.name,provider.phone`.
We also want the `name` and `code` from the `states` key, so we would
add the parameters `select=states.name,states.code`.  The id field of
each document is always returned whether or not it is requested.

Our final request would be `GET /providers/12345?select=provider.name,provider.phone,states.name,states.code`

The response would be

```
{
  provider: {
    id: 1,
    name: 'John',
    phone: '1234567890'
  },
  states: [{
    id: 1,
    name: 'New York',
    code: 'NY'
  }]
}
```

## Benefits summary format
Benefit cost-share strings are formatted to capture:
 * Network tiers
 * Compound or conditional cost-share
 * Limits on the cost-share
 * Benefit-specific maximum out-of-pocket costs

**Example #1**
As an example, we would represent [this Summary of Benefits &amp; Coverage](https://s3.amazonaws.com/vericred-data/SBC/2017/33602TX0780032.pdf) as:

* **Hospital stay facility fees**:
  - Network Provider: `$400 copay/admit plus 20% coinsurance`
  - Out-of-Network Provider: `$1,500 copay/admit plus 50% coinsurance`
  - Vericred's format for this benefit: `In-Network: $400 before deductible then 20% after deductible / Out-of-Network: $1,500 before deductible then 50% after deductible`

* **Rehabilitation services:**
  - Network Provider: `20% coinsurance`
  - Out-of-Network Provider: `50% coinsurance`
  - Limitations & Exceptions: `35 visit maximum per benefit period combined with Chiropractic care.`
  - Vericred's format for this benefit: `In-Network: 20% after deductible / Out-of-Network: 50% after deductible | limit: 35 visit(s) per Benefit Period`

**Example #2**
In [this other Summary of Benefits &amp; Coverage](https://s3.amazonaws.com/vericred-data/SBC/2017/40733CA0110568.pdf), the **specialty_drugs** cost-share has a maximum out-of-pocket for in-network pharmacies.
* **Specialty drugs:**
  - Network Provider: `40% coinsurance up to a $500 maximum for up to a 30 day supply`
  - Out-of-Network Provider `Not covered`
  - Vericred's format for this benefit: `In-Network: 40% after deductible, up to $500 per script / Out-of-Network: 100%`

**BNF**

Here's a description of the benefits summary string, represented as a context-free grammar:

```
root                      ::= coverage

coverage                  ::= (simple_coverage | tiered_coverage) (space pipe space coverage_modifier)?
tiered_coverage           ::= tier (space slash space tier)*
tier                      ::= tier_name colon space (tier_coverage | not_applicable)
tier_coverage             ::= simple_coverage (space (then | or | and) space simple_coverage)* tier_limitation?
simple_coverage           ::= (pre_coverage_limitation space)? coverage_amount (space post_coverage_limitation)? (comma? space coverage_condition)?
coverage_modifier         ::= limit_condition colon space (((simple_coverage | simple_limitation) (semicolon space see_carrier_documentation)?) | see_carrier_documentation | waived_if_admitted | shared_across_tiers)
waived_if_admitted        ::= ("copay" space)? "waived if admitted"
simple_limitation         ::= pre_coverage_limitation space "copay applies"
tier_name                 ::= "In-Network-Tier-2" | "Out-of-Network" | "In-Network"
limit_condition           ::= "limit" | "condition"
tier_limitation           ::= comma space "up to" space (currency | (integer space time_unit plural?)) (space post_coverage_limitation)?
coverage_amount           ::= currency | unlimited | included | unknown | percentage | (digits space (treatment_unit | time_unit) plural?)
pre_coverage_limitation   ::= first space digits space time_unit plural?
post_coverage_limitation  ::= (((then space currency) | "per condition") space)? "per" space (treatment_unit | (integer space time_unit) | time_unit) plural?
coverage_condition        ::= ("before deductible" | "after deductible" | "penalty" | allowance | "in-state" | "out-of-state") (space allowance)?
allowance                 ::= upto_allowance | after_allowance
upto_allowance            ::= "up to" space (currency space)? "allowance"
after_allowance           ::= "after" space (currency space)? "allowance"
see_carrier_documentation ::= "see carrier documentation for more information"
shared_across_tiers       ::= "shared across all tiers"
unknown                   ::= "unknown"
unlimited                 ::= /[uU]nlimited/
included                  ::= /[iI]ncluded in [mM]edical/
time_unit                 ::= /[hH]our/ | (((/[cC]alendar/ | /[cC]ontract/) space)? /[yY]ear/) | /[mM]onth/ | /[dD]ay/ | /[wW]eek/ | /[vV]isit/ | /[lL]ifetime/ | ((((/[bB]enefit/ plural?) | /[eE]ligibility/) space)? /[pP]eriod/)
treatment_unit            ::= /[pP]erson/ | /[gG]roup/ | /[cC]ondition/ | /[sS]cript/ | /[vV]isit/ | /[eE]xam/ | /[iI]tem/ | /[sS]tay/ | /[tT]reatment/ | /[aA]dmission/ | /[eE]pisode/
comma                     ::= ","
colon                     ::= ":"
semicolon                 ::= ";"
pipe                      ::= "|"
slash                     ::= "/"
plural                    ::= "(s)" | "s"
then                      ::= "then" | ("," space) | space
or                        ::= "or"
and                       ::= "and"
not_applicable            ::= "Not Applicable" | "N/A" | "NA"
first                     ::= "first"
currency                  ::= "$" number
percentage                ::= number "%"
number                    ::= float | integer
float                     ::= digits "." digits
integer                   ::= /[0-9]/+ (comma_int | under_int)*
comma_int                 ::= ("," /[0-9]/*3) !"_"
under_int                 ::= ("_" /[0-9]/*3) !","
digits                    ::= /[0-9]/+ ("_" /[0-9]/+)*
space                     ::= /[ \t]/+
```



    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class ACAPlan(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, carrier_name=None, display_name=None, effective_date=None, expiration_date=None, identifiers=None, name=None, network_ids=None, network_size=None, plan_type=None, service_area_id=None, source=None, type=None, adult_dental=None, age29_rider=None, ambulance=None, benefits_summary_url=None, buy_link=None, child_dental=None, child_eyewear=None, child_eye_exam=None, customer_service_phone_number=None, durable_medical_equipment=None, diagnostic_test=None, dp_rider=None, drug_formulary_url=None, emergency_room=None, family_drug_deductible=None, family_drug_moop=None, family_medical_deductible=None, family_medical_moop=None, fp_rider=None, generic_drugs=None, habilitation_services=None, hios_issuer_id=None, home_health_care=None, hospice_service=None, hsa_eligible=None, id=None, imaging=None, individual_drug_deductible=None, individual_drug_moop=None, individual_medical_deductible=None, individual_medical_moop=None, inpatient_birth=None, inpatient_facility=None, inpatient_mental_health=None, inpatient_physician=None, inpatient_substance=None, in_network_ids=None, level=None, logo_url=None, non_preferred_brand_drugs=None, on_market=None, off_market=None, out_of_network_coverage=None, out_of_network_ids=None, outpatient_facility=None, outpatient_mental_health=None, outpatient_physician=None, outpatient_substance=None, plan_market=None, preferred_brand_drugs=None, prenatal_postnatal_care=None, preventative_care=None, premium_subsidized=None, premium=None, premium_source=None, primary_care_physician=None, rehabilitation_services=None, skilled_nursing=None, specialist=None, specialty_drugs=None, urgent_care=None, actuarial_value=None, chiropractic_services=None, coinsurance=None, embedded_deductible=None, gated=None, imaging_center=None, imaging_physician=None, lab_test=None, mail_order_rx=None, nonpreferred_generic_drug_share=None, nonpreferred_specialty_drug_share=None, outpatient_ambulatory_care_center=None, plan_calendar=None, prenatal_care=None, postnatal_care=None, skilled_nursing_facility_365=None):
        """
        ACAPlan - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'carrier_name': 'str',
            'display_name': 'str',
            'effective_date': 'str',
            'expiration_date': 'str',
            'identifiers': 'list[PlanIdentifier]',
            'name': 'str',
            'network_ids': 'list[int]',
            'network_size': 'int',
            'plan_type': 'str',
            'service_area_id': 'str',
            'source': 'str',
            'type': 'str',
            'adult_dental': 'bool',
            'age29_rider': 'bool',
            'ambulance': 'str',
            'benefits_summary_url': 'str',
            'buy_link': 'str',
            'child_dental': 'bool',
            'child_eyewear': 'str',
            'child_eye_exam': 'str',
            'customer_service_phone_number': 'str',
            'durable_medical_equipment': 'str',
            'diagnostic_test': 'str',
            'dp_rider': 'bool',
            'drug_formulary_url': 'str',
            'emergency_room': 'str',
            'family_drug_deductible': 'str',
            'family_drug_moop': 'str',
            'family_medical_deductible': 'str',
            'family_medical_moop': 'str',
            'fp_rider': 'bool',
            'generic_drugs': 'str',
            'habilitation_services': 'str',
            'hios_issuer_id': 'str',
            'home_health_care': 'str',
            'hospice_service': 'str',
            'hsa_eligible': 'bool',
            'id': 'str',
            'imaging': 'str',
            'individual_drug_deductible': 'str',
            'individual_drug_moop': 'str',
            'individual_medical_deductible': 'str',
            'individual_medical_moop': 'str',
            'inpatient_birth': 'str',
            'inpatient_facility': 'str',
            'inpatient_mental_health': 'str',
            'inpatient_physician': 'str',
            'inpatient_substance': 'str',
            'in_network_ids': 'list[int]',
            'level': 'str',
            'logo_url': 'str',
            'non_preferred_brand_drugs': 'str',
            'on_market': 'bool',
            'off_market': 'bool',
            'out_of_network_coverage': 'bool',
            'out_of_network_ids': 'list[int]',
            'outpatient_facility': 'str',
            'outpatient_mental_health': 'str',
            'outpatient_physician': 'str',
            'outpatient_substance': 'str',
            'plan_market': 'str',
            'preferred_brand_drugs': 'str',
            'prenatal_postnatal_care': 'str',
            'preventative_care': 'str',
            'premium_subsidized': 'float',
            'premium': 'float',
            'premium_source': 'str',
            'primary_care_physician': 'str',
            'rehabilitation_services': 'str',
            'skilled_nursing': 'str',
            'specialist': 'str',
            'specialty_drugs': 'str',
            'urgent_care': 'str',
            'actuarial_value': 'float',
            'chiropractic_services': 'str',
            'coinsurance': 'float',
            'embedded_deductible': 'str',
            'gated': 'bool',
            'imaging_center': 'str',
            'imaging_physician': 'str',
            'lab_test': 'str',
            'mail_order_rx': 'float',
            'nonpreferred_generic_drug_share': 'str',
            'nonpreferred_specialty_drug_share': 'str',
            'outpatient_ambulatory_care_center': 'str',
            'plan_calendar': 'str',
            'prenatal_care': 'str',
            'postnatal_care': 'str',
            'skilled_nursing_facility_365': 'str'
        }

        self.attribute_map = {
            'carrier_name': 'carrier_name',
            'display_name': 'display_name',
            'effective_date': 'effective_date',
            'expiration_date': 'expiration_date',
            'identifiers': 'identifiers',
            'name': 'name',
            'network_ids': 'network_ids',
            'network_size': 'network_size',
            'plan_type': 'plan_type',
            'service_area_id': 'service_area_id',
            'source': 'source',
            'type': 'type',
            'adult_dental': 'adult_dental',
            'age29_rider': 'age29_rider',
            'ambulance': 'ambulance',
            'benefits_summary_url': 'benefits_summary_url',
            'buy_link': 'buy_link',
            'child_dental': 'child_dental',
            'child_eyewear': 'child_eyewear',
            'child_eye_exam': 'child_eye_exam',
            'customer_service_phone_number': 'customer_service_phone_number',
            'durable_medical_equipment': 'durable_medical_equipment',
            'diagnostic_test': 'diagnostic_test',
            'dp_rider': 'dp_rider',
            'drug_formulary_url': 'drug_formulary_url',
            'emergency_room': 'emergency_room',
            'family_drug_deductible': 'family_drug_deductible',
            'family_drug_moop': 'family_drug_moop',
            'family_medical_deductible': 'family_medical_deductible',
            'family_medical_moop': 'family_medical_moop',
            'fp_rider': 'fp_rider',
            'generic_drugs': 'generic_drugs',
            'habilitation_services': 'habilitation_services',
            'hios_issuer_id': 'hios_issuer_id',
            'home_health_care': 'home_health_care',
            'hospice_service': 'hospice_service',
            'hsa_eligible': 'hsa_eligible',
            'id': 'id',
            'imaging': 'imaging',
            'individual_drug_deductible': 'individual_drug_deductible',
            'individual_drug_moop': 'individual_drug_moop',
            'individual_medical_deductible': 'individual_medical_deductible',
            'individual_medical_moop': 'individual_medical_moop',
            'inpatient_birth': 'inpatient_birth',
            'inpatient_facility': 'inpatient_facility',
            'inpatient_mental_health': 'inpatient_mental_health',
            'inpatient_physician': 'inpatient_physician',
            'inpatient_substance': 'inpatient_substance',
            'in_network_ids': 'in_network_ids',
            'level': 'level',
            'logo_url': 'logo_url',
            'non_preferred_brand_drugs': 'non_preferred_brand_drugs',
            'on_market': 'on_market',
            'off_market': 'off_market',
            'out_of_network_coverage': 'out_of_network_coverage',
            'out_of_network_ids': 'out_of_network_ids',
            'outpatient_facility': 'outpatient_facility',
            'outpatient_mental_health': 'outpatient_mental_health',
            'outpatient_physician': 'outpatient_physician',
            'outpatient_substance': 'outpatient_substance',
            'plan_market': 'plan_market',
            'preferred_brand_drugs': 'preferred_brand_drugs',
            'prenatal_postnatal_care': 'prenatal_postnatal_care',
            'preventative_care': 'preventative_care',
            'premium_subsidized': 'premium_subsidized',
            'premium': 'premium',
            'premium_source': 'premium_source',
            'primary_care_physician': 'primary_care_physician',
            'rehabilitation_services': 'rehabilitation_services',
            'skilled_nursing': 'skilled_nursing',
            'specialist': 'specialist',
            'specialty_drugs': 'specialty_drugs',
            'urgent_care': 'urgent_care',
            'actuarial_value': 'actuarial_value',
            'chiropractic_services': 'chiropractic_services',
            'coinsurance': 'coinsurance',
            'embedded_deductible': 'embedded_deductible',
            'gated': 'gated',
            'imaging_center': 'imaging_center',
            'imaging_physician': 'imaging_physician',
            'lab_test': 'lab_test',
            'mail_order_rx': 'mail_order_rx',
            'nonpreferred_generic_drug_share': 'nonpreferred_generic_drug_share',
            'nonpreferred_specialty_drug_share': 'nonpreferred_specialty_drug_share',
            'outpatient_ambulatory_care_center': 'outpatient_ambulatory_care_center',
            'plan_calendar': 'plan_calendar',
            'prenatal_care': 'prenatal_care',
            'postnatal_care': 'postnatal_care',
            'skilled_nursing_facility_365': 'skilled_nursing_facility_365'
        }

        self._carrier_name = carrier_name
        self._display_name = display_name
        self._effective_date = effective_date
        self._expiration_date = expiration_date
        self._identifiers = identifiers
        self._name = name
        self._network_ids = network_ids
        self._network_size = network_size
        self._plan_type = plan_type
        self._service_area_id = service_area_id
        self._source = source
        self._type = type
        self._adult_dental = adult_dental
        self._age29_rider = age29_rider
        self._ambulance = ambulance
        self._benefits_summary_url = benefits_summary_url
        self._buy_link = buy_link
        self._child_dental = child_dental
        self._child_eyewear = child_eyewear
        self._child_eye_exam = child_eye_exam
        self._customer_service_phone_number = customer_service_phone_number
        self._durable_medical_equipment = durable_medical_equipment
        self._diagnostic_test = diagnostic_test
        self._dp_rider = dp_rider
        self._drug_formulary_url = drug_formulary_url
        self._emergency_room = emergency_room
        self._family_drug_deductible = family_drug_deductible
        self._family_drug_moop = family_drug_moop
        self._family_medical_deductible = family_medical_deductible
        self._family_medical_moop = family_medical_moop
        self._fp_rider = fp_rider
        self._generic_drugs = generic_drugs
        self._habilitation_services = habilitation_services
        self._hios_issuer_id = hios_issuer_id
        self._home_health_care = home_health_care
        self._hospice_service = hospice_service
        self._hsa_eligible = hsa_eligible
        self._id = id
        self._imaging = imaging
        self._individual_drug_deductible = individual_drug_deductible
        self._individual_drug_moop = individual_drug_moop
        self._individual_medical_deductible = individual_medical_deductible
        self._individual_medical_moop = individual_medical_moop
        self._inpatient_birth = inpatient_birth
        self._inpatient_facility = inpatient_facility
        self._inpatient_mental_health = inpatient_mental_health
        self._inpatient_physician = inpatient_physician
        self._inpatient_substance = inpatient_substance
        self._in_network_ids = in_network_ids
        self._level = level
        self._logo_url = logo_url
        self._non_preferred_brand_drugs = non_preferred_brand_drugs
        self._on_market = on_market
        self._off_market = off_market
        self._out_of_network_coverage = out_of_network_coverage
        self._out_of_network_ids = out_of_network_ids
        self._outpatient_facility = outpatient_facility
        self._outpatient_mental_health = outpatient_mental_health
        self._outpatient_physician = outpatient_physician
        self._outpatient_substance = outpatient_substance
        self._plan_market = plan_market
        self._preferred_brand_drugs = preferred_brand_drugs
        self._prenatal_postnatal_care = prenatal_postnatal_care
        self._preventative_care = preventative_care
        self._premium_subsidized = premium_subsidized
        self._premium = premium
        self._premium_source = premium_source
        self._primary_care_physician = primary_care_physician
        self._rehabilitation_services = rehabilitation_services
        self._skilled_nursing = skilled_nursing
        self._specialist = specialist
        self._specialty_drugs = specialty_drugs
        self._urgent_care = urgent_care
        self._actuarial_value = actuarial_value
        self._chiropractic_services = chiropractic_services
        self._coinsurance = coinsurance
        self._embedded_deductible = embedded_deductible
        self._gated = gated
        self._imaging_center = imaging_center
        self._imaging_physician = imaging_physician
        self._lab_test = lab_test
        self._mail_order_rx = mail_order_rx
        self._nonpreferred_generic_drug_share = nonpreferred_generic_drug_share
        self._nonpreferred_specialty_drug_share = nonpreferred_specialty_drug_share
        self._outpatient_ambulatory_care_center = outpatient_ambulatory_care_center
        self._plan_calendar = plan_calendar
        self._prenatal_care = prenatal_care
        self._postnatal_care = postnatal_care
        self._skilled_nursing_facility_365 = skilled_nursing_facility_365


    @property
    def carrier_name(self):
        """
        Gets the carrier_name of this ACAPlan.
        Name of the insurance carrier

        :return: The carrier_name of this ACAPlan.
        :rtype: str
        """
        return self._carrier_name

    @carrier_name.setter
    def carrier_name(self, carrier_name):
        """
        Sets the carrier_name of this ACAPlan.
        Name of the insurance carrier

        :param carrier_name: The carrier_name of this ACAPlan.
        :type: str
        """

        self._carrier_name = carrier_name

    @property
    def display_name(self):
        """
        Gets the display_name of this ACAPlan.
        Alternate name for the Plan

        :return: The display_name of this ACAPlan.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """
        Sets the display_name of this ACAPlan.
        Alternate name for the Plan

        :param display_name: The display_name of this ACAPlan.
        :type: str
        """

        self._display_name = display_name

    @property
    def effective_date(self):
        """
        Gets the effective_date of this ACAPlan.
        Effective date of coverage.

        :return: The effective_date of this ACAPlan.
        :rtype: str
        """
        return self._effective_date

    @effective_date.setter
    def effective_date(self, effective_date):
        """
        Sets the effective_date of this ACAPlan.
        Effective date of coverage.

        :param effective_date: The effective_date of this ACAPlan.
        :type: str
        """

        self._effective_date = effective_date

    @property
    def expiration_date(self):
        """
        Gets the expiration_date of this ACAPlan.
        Expiration date of coverage.

        :return: The expiration_date of this ACAPlan.
        :rtype: str
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """
        Sets the expiration_date of this ACAPlan.
        Expiration date of coverage.

        :param expiration_date: The expiration_date of this ACAPlan.
        :type: str
        """

        self._expiration_date = expiration_date

    @property
    def identifiers(self):
        """
        Gets the identifiers of this ACAPlan.
        List of identifiers of this Plan

        :return: The identifiers of this ACAPlan.
        :rtype: list[PlanIdentifier]
        """
        return self._identifiers

    @identifiers.setter
    def identifiers(self, identifiers):
        """
        Sets the identifiers of this ACAPlan.
        List of identifiers of this Plan

        :param identifiers: The identifiers of this ACAPlan.
        :type: list[PlanIdentifier]
        """

        self._identifiers = identifiers

    @property
    def name(self):
        """
        Gets the name of this ACAPlan.
        Marketing name of the plan

        :return: The name of this ACAPlan.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ACAPlan.
        Marketing name of the plan

        :param name: The name of this ACAPlan.
        :type: str
        """

        self._name = name

    @property
    def network_ids(self):
        """
        Gets the network_ids of this ACAPlan.
        List of Vericred-generated network_ids

        :return: The network_ids of this ACAPlan.
        :rtype: list[int]
        """
        return self._network_ids

    @network_ids.setter
    def network_ids(self, network_ids):
        """
        Sets the network_ids of this ACAPlan.
        List of Vericred-generated network_ids

        :param network_ids: The network_ids of this ACAPlan.
        :type: list[int]
        """

        self._network_ids = network_ids

    @property
    def network_size(self):
        """
        Gets the network_size of this ACAPlan.
        Total number of Providers in network

        :return: The network_size of this ACAPlan.
        :rtype: int
        """
        return self._network_size

    @network_size.setter
    def network_size(self, network_size):
        """
        Sets the network_size of this ACAPlan.
        Total number of Providers in network

        :param network_size: The network_size of this ACAPlan.
        :type: int
        """

        self._network_size = network_size

    @property
    def plan_type(self):
        """
        Gets the plan_type of this ACAPlan.
        Category of the plan (e.g. EPO, HMO, PPO, POS, Indemnity, PACE, Medicare-Medicaid, HMO w/POS, Cost, FFS, MSA)

        :return: The plan_type of this ACAPlan.
        :rtype: str
        """
        return self._plan_type

    @plan_type.setter
    def plan_type(self, plan_type):
        """
        Sets the plan_type of this ACAPlan.
        Category of the plan (e.g. EPO, HMO, PPO, POS, Indemnity, PACE, Medicare-Medicaid, HMO w/POS, Cost, FFS, MSA)

        :param plan_type: The plan_type of this ACAPlan.
        :type: str
        """

        self._plan_type = plan_type

    @property
    def service_area_id(self):
        """
        Gets the service_area_id of this ACAPlan.
        Foreign key for service area

        :return: The service_area_id of this ACAPlan.
        :rtype: str
        """
        return self._service_area_id

    @service_area_id.setter
    def service_area_id(self, service_area_id):
        """
        Sets the service_area_id of this ACAPlan.
        Foreign key for service area

        :param service_area_id: The service_area_id of this ACAPlan.
        :type: str
        """

        self._service_area_id = service_area_id

    @property
    def source(self):
        """
        Gets the source of this ACAPlan.
        Source of the plan benefit data

        :return: The source of this ACAPlan.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """
        Sets the source of this ACAPlan.
        Source of the plan benefit data

        :param source: The source of this ACAPlan.
        :type: str
        """

        self._source = source

    @property
    def type(self):
        """
        Gets the type of this ACAPlan.
        The type of the Plan

        :return: The type of this ACAPlan.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this ACAPlan.
        The type of the Plan

        :param type: The type of this ACAPlan.
        :type: str
        """

        self._type = type

    @property
    def adult_dental(self):
        """
        Gets the adult_dental of this ACAPlan.
        Does the plan provide dental coverage for adults?

        :return: The adult_dental of this ACAPlan.
        :rtype: bool
        """
        return self._adult_dental

    @adult_dental.setter
    def adult_dental(self, adult_dental):
        """
        Sets the adult_dental of this ACAPlan.
        Does the plan provide dental coverage for adults?

        :param adult_dental: The adult_dental of this ACAPlan.
        :type: bool
        """

        self._adult_dental = adult_dental

    @property
    def age29_rider(self):
        """
        Gets the age29_rider of this ACAPlan.
        True if the plan allows dependents up to age 29

        :return: The age29_rider of this ACAPlan.
        :rtype: bool
        """
        return self._age29_rider

    @age29_rider.setter
    def age29_rider(self, age29_rider):
        """
        Sets the age29_rider of this ACAPlan.
        True if the plan allows dependents up to age 29

        :param age29_rider: The age29_rider of this ACAPlan.
        :type: bool
        """

        self._age29_rider = age29_rider

    @property
    def ambulance(self):
        """
        Gets the ambulance of this ACAPlan.
        Benefits string for ambulance coverage

        :return: The ambulance of this ACAPlan.
        :rtype: str
        """
        return self._ambulance

    @ambulance.setter
    def ambulance(self, ambulance):
        """
        Sets the ambulance of this ACAPlan.
        Benefits string for ambulance coverage

        :param ambulance: The ambulance of this ACAPlan.
        :type: str
        """

        self._ambulance = ambulance

    @property
    def benefits_summary_url(self):
        """
        Gets the benefits_summary_url of this ACAPlan.
        Link to the summary of benefits and coverage (SBC) document.

        :return: The benefits_summary_url of this ACAPlan.
        :rtype: str
        """
        return self._benefits_summary_url

    @benefits_summary_url.setter
    def benefits_summary_url(self, benefits_summary_url):
        """
        Sets the benefits_summary_url of this ACAPlan.
        Link to the summary of benefits and coverage (SBC) document.

        :param benefits_summary_url: The benefits_summary_url of this ACAPlan.
        :type: str
        """

        self._benefits_summary_url = benefits_summary_url

    @property
    def buy_link(self):
        """
        Gets the buy_link of this ACAPlan.
        Link to a location to purchase the plan.

        :return: The buy_link of this ACAPlan.
        :rtype: str
        """
        return self._buy_link

    @buy_link.setter
    def buy_link(self, buy_link):
        """
        Sets the buy_link of this ACAPlan.
        Link to a location to purchase the plan.

        :param buy_link: The buy_link of this ACAPlan.
        :type: str
        """

        self._buy_link = buy_link

    @property
    def child_dental(self):
        """
        Gets the child_dental of this ACAPlan.
        Does the plan provide dental coverage for children?

        :return: The child_dental of this ACAPlan.
        :rtype: bool
        """
        return self._child_dental

    @child_dental.setter
    def child_dental(self, child_dental):
        """
        Sets the child_dental of this ACAPlan.
        Does the plan provide dental coverage for children?

        :param child_dental: The child_dental of this ACAPlan.
        :type: bool
        """

        self._child_dental = child_dental

    @property
    def child_eyewear(self):
        """
        Gets the child_eyewear of this ACAPlan.
        Child eyewear benefits summary

        :return: The child_eyewear of this ACAPlan.
        :rtype: str
        """
        return self._child_eyewear

    @child_eyewear.setter
    def child_eyewear(self, child_eyewear):
        """
        Sets the child_eyewear of this ACAPlan.
        Child eyewear benefits summary

        :param child_eyewear: The child_eyewear of this ACAPlan.
        :type: str
        """

        self._child_eyewear = child_eyewear

    @property
    def child_eye_exam(self):
        """
        Gets the child_eye_exam of this ACAPlan.
        Child eye exam benefits summary

        :return: The child_eye_exam of this ACAPlan.
        :rtype: str
        """
        return self._child_eye_exam

    @child_eye_exam.setter
    def child_eye_exam(self, child_eye_exam):
        """
        Sets the child_eye_exam of this ACAPlan.
        Child eye exam benefits summary

        :param child_eye_exam: The child_eye_exam of this ACAPlan.
        :type: str
        """

        self._child_eye_exam = child_eye_exam

    @property
    def customer_service_phone_number(self):
        """
        Gets the customer_service_phone_number of this ACAPlan.
        Phone number to contact the insurance carrier

        :return: The customer_service_phone_number of this ACAPlan.
        :rtype: str
        """
        return self._customer_service_phone_number

    @customer_service_phone_number.setter
    def customer_service_phone_number(self, customer_service_phone_number):
        """
        Sets the customer_service_phone_number of this ACAPlan.
        Phone number to contact the insurance carrier

        :param customer_service_phone_number: The customer_service_phone_number of this ACAPlan.
        :type: str
        """

        self._customer_service_phone_number = customer_service_phone_number

    @property
    def durable_medical_equipment(self):
        """
        Gets the durable_medical_equipment of this ACAPlan.
        Benefits summary for durable medical equipment

        :return: The durable_medical_equipment of this ACAPlan.
        :rtype: str
        """
        return self._durable_medical_equipment

    @durable_medical_equipment.setter
    def durable_medical_equipment(self, durable_medical_equipment):
        """
        Sets the durable_medical_equipment of this ACAPlan.
        Benefits summary for durable medical equipment

        :param durable_medical_equipment: The durable_medical_equipment of this ACAPlan.
        :type: str
        """

        self._durable_medical_equipment = durable_medical_equipment

    @property
    def diagnostic_test(self):
        """
        Gets the diagnostic_test of this ACAPlan.
        Diagnostic tests benefit summary

        :return: The diagnostic_test of this ACAPlan.
        :rtype: str
        """
        return self._diagnostic_test

    @diagnostic_test.setter
    def diagnostic_test(self, diagnostic_test):
        """
        Sets the diagnostic_test of this ACAPlan.
        Diagnostic tests benefit summary

        :param diagnostic_test: The diagnostic_test of this ACAPlan.
        :type: str
        """

        self._diagnostic_test = diagnostic_test

    @property
    def dp_rider(self):
        """
        Gets the dp_rider of this ACAPlan.
        True if plan does not cover domestic partners

        :return: The dp_rider of this ACAPlan.
        :rtype: bool
        """
        return self._dp_rider

    @dp_rider.setter
    def dp_rider(self, dp_rider):
        """
        Sets the dp_rider of this ACAPlan.
        True if plan does not cover domestic partners

        :param dp_rider: The dp_rider of this ACAPlan.
        :type: bool
        """

        self._dp_rider = dp_rider

    @property
    def drug_formulary_url(self):
        """
        Gets the drug_formulary_url of this ACAPlan.
        Link to the summary of drug benefits for the plan

        :return: The drug_formulary_url of this ACAPlan.
        :rtype: str
        """
        return self._drug_formulary_url

    @drug_formulary_url.setter
    def drug_formulary_url(self, drug_formulary_url):
        """
        Sets the drug_formulary_url of this ACAPlan.
        Link to the summary of drug benefits for the plan

        :param drug_formulary_url: The drug_formulary_url of this ACAPlan.
        :type: str
        """

        self._drug_formulary_url = drug_formulary_url

    @property
    def emergency_room(self):
        """
        Gets the emergency_room of this ACAPlan.
        Description of costs when visiting the ER

        :return: The emergency_room of this ACAPlan.
        :rtype: str
        """
        return self._emergency_room

    @emergency_room.setter
    def emergency_room(self, emergency_room):
        """
        Sets the emergency_room of this ACAPlan.
        Description of costs when visiting the ER

        :param emergency_room: The emergency_room of this ACAPlan.
        :type: str
        """

        self._emergency_room = emergency_room

    @property
    def family_drug_deductible(self):
        """
        Gets the family_drug_deductible of this ACAPlan.
        Deductible for drugs when a family is on the plan.

        :return: The family_drug_deductible of this ACAPlan.
        :rtype: str
        """
        return self._family_drug_deductible

    @family_drug_deductible.setter
    def family_drug_deductible(self, family_drug_deductible):
        """
        Sets the family_drug_deductible of this ACAPlan.
        Deductible for drugs when a family is on the plan.

        :param family_drug_deductible: The family_drug_deductible of this ACAPlan.
        :type: str
        """

        self._family_drug_deductible = family_drug_deductible

    @property
    def family_drug_moop(self):
        """
        Gets the family_drug_moop of this ACAPlan.
        Maximum out-of-pocket for drugs when a family is on the plan

        :return: The family_drug_moop of this ACAPlan.
        :rtype: str
        """
        return self._family_drug_moop

    @family_drug_moop.setter
    def family_drug_moop(self, family_drug_moop):
        """
        Sets the family_drug_moop of this ACAPlan.
        Maximum out-of-pocket for drugs when a family is on the plan

        :param family_drug_moop: The family_drug_moop of this ACAPlan.
        :type: str
        """

        self._family_drug_moop = family_drug_moop

    @property
    def family_medical_deductible(self):
        """
        Gets the family_medical_deductible of this ACAPlan.
        Deductible when a family is on the plan

        :return: The family_medical_deductible of this ACAPlan.
        :rtype: str
        """
        return self._family_medical_deductible

    @family_medical_deductible.setter
    def family_medical_deductible(self, family_medical_deductible):
        """
        Sets the family_medical_deductible of this ACAPlan.
        Deductible when a family is on the plan

        :param family_medical_deductible: The family_medical_deductible of this ACAPlan.
        :type: str
        """

        self._family_medical_deductible = family_medical_deductible

    @property
    def family_medical_moop(self):
        """
        Gets the family_medical_moop of this ACAPlan.
        Maximum out-of-pocket when a family is on the plan

        :return: The family_medical_moop of this ACAPlan.
        :rtype: str
        """
        return self._family_medical_moop

    @family_medical_moop.setter
    def family_medical_moop(self, family_medical_moop):
        """
        Sets the family_medical_moop of this ACAPlan.
        Maximum out-of-pocket when a family is on the plan

        :param family_medical_moop: The family_medical_moop of this ACAPlan.
        :type: str
        """

        self._family_medical_moop = family_medical_moop

    @property
    def fp_rider(self):
        """
        Gets the fp_rider of this ACAPlan.
        True if plan does not cover family planning

        :return: The fp_rider of this ACAPlan.
        :rtype: bool
        """
        return self._fp_rider

    @fp_rider.setter
    def fp_rider(self, fp_rider):
        """
        Sets the fp_rider of this ACAPlan.
        True if plan does not cover family planning

        :param fp_rider: The fp_rider of this ACAPlan.
        :type: bool
        """

        self._fp_rider = fp_rider

    @property
    def generic_drugs(self):
        """
        Gets the generic_drugs of this ACAPlan.
        Cost for generic drugs

        :return: The generic_drugs of this ACAPlan.
        :rtype: str
        """
        return self._generic_drugs

    @generic_drugs.setter
    def generic_drugs(self, generic_drugs):
        """
        Sets the generic_drugs of this ACAPlan.
        Cost for generic drugs

        :param generic_drugs: The generic_drugs of this ACAPlan.
        :type: str
        """

        self._generic_drugs = generic_drugs

    @property
    def habilitation_services(self):
        """
        Gets the habilitation_services of this ACAPlan.
        Habilitation services benefits summary

        :return: The habilitation_services of this ACAPlan.
        :rtype: str
        """
        return self._habilitation_services

    @habilitation_services.setter
    def habilitation_services(self, habilitation_services):
        """
        Sets the habilitation_services of this ACAPlan.
        Habilitation services benefits summary

        :param habilitation_services: The habilitation_services of this ACAPlan.
        :type: str
        """

        self._habilitation_services = habilitation_services

    @property
    def hios_issuer_id(self):
        """
        Gets the hios_issuer_id of this ACAPlan.
        

        :return: The hios_issuer_id of this ACAPlan.
        :rtype: str
        """
        return self._hios_issuer_id

    @hios_issuer_id.setter
    def hios_issuer_id(self, hios_issuer_id):
        """
        Sets the hios_issuer_id of this ACAPlan.
        

        :param hios_issuer_id: The hios_issuer_id of this ACAPlan.
        :type: str
        """

        self._hios_issuer_id = hios_issuer_id

    @property
    def home_health_care(self):
        """
        Gets the home_health_care of this ACAPlan.
        Home health care benefits summary

        :return: The home_health_care of this ACAPlan.
        :rtype: str
        """
        return self._home_health_care

    @home_health_care.setter
    def home_health_care(self, home_health_care):
        """
        Sets the home_health_care of this ACAPlan.
        Home health care benefits summary

        :param home_health_care: The home_health_care of this ACAPlan.
        :type: str
        """

        self._home_health_care = home_health_care

    @property
    def hospice_service(self):
        """
        Gets the hospice_service of this ACAPlan.
        Hospice service benefits summary

        :return: The hospice_service of this ACAPlan.
        :rtype: str
        """
        return self._hospice_service

    @hospice_service.setter
    def hospice_service(self, hospice_service):
        """
        Sets the hospice_service of this ACAPlan.
        Hospice service benefits summary

        :param hospice_service: The hospice_service of this ACAPlan.
        :type: str
        """

        self._hospice_service = hospice_service

    @property
    def hsa_eligible(self):
        """
        Gets the hsa_eligible of this ACAPlan.
        Is the plan HSA eligible?

        :return: The hsa_eligible of this ACAPlan.
        :rtype: bool
        """
        return self._hsa_eligible

    @hsa_eligible.setter
    def hsa_eligible(self, hsa_eligible):
        """
        Sets the hsa_eligible of this ACAPlan.
        Is the plan HSA eligible?

        :param hsa_eligible: The hsa_eligible of this ACAPlan.
        :type: bool
        """

        self._hsa_eligible = hsa_eligible

    @property
    def id(self):
        """
        Gets the id of this ACAPlan.
        Government-issued HIOS plan ID

        :return: The id of this ACAPlan.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ACAPlan.
        Government-issued HIOS plan ID

        :param id: The id of this ACAPlan.
        :type: str
        """

        self._id = id

    @property
    def imaging(self):
        """
        Gets the imaging of this ACAPlan.
        Benefits summary for imaging coverage

        :return: The imaging of this ACAPlan.
        :rtype: str
        """
        return self._imaging

    @imaging.setter
    def imaging(self, imaging):
        """
        Sets the imaging of this ACAPlan.
        Benefits summary for imaging coverage

        :param imaging: The imaging of this ACAPlan.
        :type: str
        """

        self._imaging = imaging

    @property
    def individual_drug_deductible(self):
        """
        Gets the individual_drug_deductible of this ACAPlan.
        Deductible for drugs when an individual is on the plan

        :return: The individual_drug_deductible of this ACAPlan.
        :rtype: str
        """
        return self._individual_drug_deductible

    @individual_drug_deductible.setter
    def individual_drug_deductible(self, individual_drug_deductible):
        """
        Sets the individual_drug_deductible of this ACAPlan.
        Deductible for drugs when an individual is on the plan

        :param individual_drug_deductible: The individual_drug_deductible of this ACAPlan.
        :type: str
        """

        self._individual_drug_deductible = individual_drug_deductible

    @property
    def individual_drug_moop(self):
        """
        Gets the individual_drug_moop of this ACAPlan.
        Maximum out-of-pocket for drugs when an individual is on the plan

        :return: The individual_drug_moop of this ACAPlan.
        :rtype: str
        """
        return self._individual_drug_moop

    @individual_drug_moop.setter
    def individual_drug_moop(self, individual_drug_moop):
        """
        Sets the individual_drug_moop of this ACAPlan.
        Maximum out-of-pocket for drugs when an individual is on the plan

        :param individual_drug_moop: The individual_drug_moop of this ACAPlan.
        :type: str
        """

        self._individual_drug_moop = individual_drug_moop

    @property
    def individual_medical_deductible(self):
        """
        Gets the individual_medical_deductible of this ACAPlan.
        Deductible when an individual is on the plan

        :return: The individual_medical_deductible of this ACAPlan.
        :rtype: str
        """
        return self._individual_medical_deductible

    @individual_medical_deductible.setter
    def individual_medical_deductible(self, individual_medical_deductible):
        """
        Sets the individual_medical_deductible of this ACAPlan.
        Deductible when an individual is on the plan

        :param individual_medical_deductible: The individual_medical_deductible of this ACAPlan.
        :type: str
        """

        self._individual_medical_deductible = individual_medical_deductible

    @property
    def individual_medical_moop(self):
        """
        Gets the individual_medical_moop of this ACAPlan.
        Maximum out-of-pocket when an individual is on the plan

        :return: The individual_medical_moop of this ACAPlan.
        :rtype: str
        """
        return self._individual_medical_moop

    @individual_medical_moop.setter
    def individual_medical_moop(self, individual_medical_moop):
        """
        Sets the individual_medical_moop of this ACAPlan.
        Maximum out-of-pocket when an individual is on the plan

        :param individual_medical_moop: The individual_medical_moop of this ACAPlan.
        :type: str
        """

        self._individual_medical_moop = individual_medical_moop

    @property
    def inpatient_birth(self):
        """
        Gets the inpatient_birth of this ACAPlan.
        Inpatient birth benefits summary

        :return: The inpatient_birth of this ACAPlan.
        :rtype: str
        """
        return self._inpatient_birth

    @inpatient_birth.setter
    def inpatient_birth(self, inpatient_birth):
        """
        Sets the inpatient_birth of this ACAPlan.
        Inpatient birth benefits summary

        :param inpatient_birth: The inpatient_birth of this ACAPlan.
        :type: str
        """

        self._inpatient_birth = inpatient_birth

    @property
    def inpatient_facility(self):
        """
        Gets the inpatient_facility of this ACAPlan.
        Cost under the plan for an inpatient facility

        :return: The inpatient_facility of this ACAPlan.
        :rtype: str
        """
        return self._inpatient_facility

    @inpatient_facility.setter
    def inpatient_facility(self, inpatient_facility):
        """
        Sets the inpatient_facility of this ACAPlan.
        Cost under the plan for an inpatient facility

        :param inpatient_facility: The inpatient_facility of this ACAPlan.
        :type: str
        """

        self._inpatient_facility = inpatient_facility

    @property
    def inpatient_mental_health(self):
        """
        Gets the inpatient_mental_health of this ACAPlan.
        Inpatient mental helath benefits summary

        :return: The inpatient_mental_health of this ACAPlan.
        :rtype: str
        """
        return self._inpatient_mental_health

    @inpatient_mental_health.setter
    def inpatient_mental_health(self, inpatient_mental_health):
        """
        Sets the inpatient_mental_health of this ACAPlan.
        Inpatient mental helath benefits summary

        :param inpatient_mental_health: The inpatient_mental_health of this ACAPlan.
        :type: str
        """

        self._inpatient_mental_health = inpatient_mental_health

    @property
    def inpatient_physician(self):
        """
        Gets the inpatient_physician of this ACAPlan.
        Cost under the plan for an inpatient physician

        :return: The inpatient_physician of this ACAPlan.
        :rtype: str
        """
        return self._inpatient_physician

    @inpatient_physician.setter
    def inpatient_physician(self, inpatient_physician):
        """
        Sets the inpatient_physician of this ACAPlan.
        Cost under the plan for an inpatient physician

        :param inpatient_physician: The inpatient_physician of this ACAPlan.
        :type: str
        """

        self._inpatient_physician = inpatient_physician

    @property
    def inpatient_substance(self):
        """
        Gets the inpatient_substance of this ACAPlan.
        Inpatient substance abuse benefits summary

        :return: The inpatient_substance of this ACAPlan.
        :rtype: str
        """
        return self._inpatient_substance

    @inpatient_substance.setter
    def inpatient_substance(self, inpatient_substance):
        """
        Sets the inpatient_substance of this ACAPlan.
        Inpatient substance abuse benefits summary

        :param inpatient_substance: The inpatient_substance of this ACAPlan.
        :type: str
        """

        self._inpatient_substance = inpatient_substance

    @property
    def in_network_ids(self):
        """
        Gets the in_network_ids of this ACAPlan.
        List of NPI numbers for Providers passed in who accept this Plan

        :return: The in_network_ids of this ACAPlan.
        :rtype: list[int]
        """
        return self._in_network_ids

    @in_network_ids.setter
    def in_network_ids(self, in_network_ids):
        """
        Sets the in_network_ids of this ACAPlan.
        List of NPI numbers for Providers passed in who accept this Plan

        :param in_network_ids: The in_network_ids of this ACAPlan.
        :type: list[int]
        """

        self._in_network_ids = in_network_ids

    @property
    def level(self):
        """
        Gets the level of this ACAPlan.
        Plan metal grouping (e.g. platinum, gold, silver, etc)

        :return: The level of this ACAPlan.
        :rtype: str
        """
        return self._level

    @level.setter
    def level(self, level):
        """
        Sets the level of this ACAPlan.
        Plan metal grouping (e.g. platinum, gold, silver, etc)

        :param level: The level of this ACAPlan.
        :type: str
        """

        self._level = level

    @property
    def logo_url(self):
        """
        Gets the logo_url of this ACAPlan.
        Link to a copy of the insurance carrier's logo

        :return: The logo_url of this ACAPlan.
        :rtype: str
        """
        return self._logo_url

    @logo_url.setter
    def logo_url(self, logo_url):
        """
        Sets the logo_url of this ACAPlan.
        Link to a copy of the insurance carrier's logo

        :param logo_url: The logo_url of this ACAPlan.
        :type: str
        """

        self._logo_url = logo_url

    @property
    def non_preferred_brand_drugs(self):
        """
        Gets the non_preferred_brand_drugs of this ACAPlan.
        Cost under the plan for non-preferred brand drugs

        :return: The non_preferred_brand_drugs of this ACAPlan.
        :rtype: str
        """
        return self._non_preferred_brand_drugs

    @non_preferred_brand_drugs.setter
    def non_preferred_brand_drugs(self, non_preferred_brand_drugs):
        """
        Sets the non_preferred_brand_drugs of this ACAPlan.
        Cost under the plan for non-preferred brand drugs

        :param non_preferred_brand_drugs: The non_preferred_brand_drugs of this ACAPlan.
        :type: str
        """

        self._non_preferred_brand_drugs = non_preferred_brand_drugs

    @property
    def on_market(self):
        """
        Gets the on_market of this ACAPlan.
        Is the plan on-market?

        :return: The on_market of this ACAPlan.
        :rtype: bool
        """
        return self._on_market

    @on_market.setter
    def on_market(self, on_market):
        """
        Sets the on_market of this ACAPlan.
        Is the plan on-market?

        :param on_market: The on_market of this ACAPlan.
        :type: bool
        """

        self._on_market = on_market

    @property
    def off_market(self):
        """
        Gets the off_market of this ACAPlan.
        Is the plan off-market?

        :return: The off_market of this ACAPlan.
        :rtype: bool
        """
        return self._off_market

    @off_market.setter
    def off_market(self, off_market):
        """
        Sets the off_market of this ACAPlan.
        Is the plan off-market?

        :param off_market: The off_market of this ACAPlan.
        :type: bool
        """

        self._off_market = off_market

    @property
    def out_of_network_coverage(self):
        """
        Gets the out_of_network_coverage of this ACAPlan.
        Does this plan provide any out of network coverage?

        :return: The out_of_network_coverage of this ACAPlan.
        :rtype: bool
        """
        return self._out_of_network_coverage

    @out_of_network_coverage.setter
    def out_of_network_coverage(self, out_of_network_coverage):
        """
        Sets the out_of_network_coverage of this ACAPlan.
        Does this plan provide any out of network coverage?

        :param out_of_network_coverage: The out_of_network_coverage of this ACAPlan.
        :type: bool
        """

        self._out_of_network_coverage = out_of_network_coverage

    @property
    def out_of_network_ids(self):
        """
        Gets the out_of_network_ids of this ACAPlan.
        List of NPI numbers for Providers passed in who do not accept this Plan

        :return: The out_of_network_ids of this ACAPlan.
        :rtype: list[int]
        """
        return self._out_of_network_ids

    @out_of_network_ids.setter
    def out_of_network_ids(self, out_of_network_ids):
        """
        Sets the out_of_network_ids of this ACAPlan.
        List of NPI numbers for Providers passed in who do not accept this Plan

        :param out_of_network_ids: The out_of_network_ids of this ACAPlan.
        :type: list[int]
        """

        self._out_of_network_ids = out_of_network_ids

    @property
    def outpatient_facility(self):
        """
        Gets the outpatient_facility of this ACAPlan.
        Benefits summary for outpatient facility coverage

        :return: The outpatient_facility of this ACAPlan.
        :rtype: str
        """
        return self._outpatient_facility

    @outpatient_facility.setter
    def outpatient_facility(self, outpatient_facility):
        """
        Sets the outpatient_facility of this ACAPlan.
        Benefits summary for outpatient facility coverage

        :param outpatient_facility: The outpatient_facility of this ACAPlan.
        :type: str
        """

        self._outpatient_facility = outpatient_facility

    @property
    def outpatient_mental_health(self):
        """
        Gets the outpatient_mental_health of this ACAPlan.
        Benefits summary for outpatient mental health coverage

        :return: The outpatient_mental_health of this ACAPlan.
        :rtype: str
        """
        return self._outpatient_mental_health

    @outpatient_mental_health.setter
    def outpatient_mental_health(self, outpatient_mental_health):
        """
        Sets the outpatient_mental_health of this ACAPlan.
        Benefits summary for outpatient mental health coverage

        :param outpatient_mental_health: The outpatient_mental_health of this ACAPlan.
        :type: str
        """

        self._outpatient_mental_health = outpatient_mental_health

    @property
    def outpatient_physician(self):
        """
        Gets the outpatient_physician of this ACAPlan.
        Benefits summary for outpatient physician coverage

        :return: The outpatient_physician of this ACAPlan.
        :rtype: str
        """
        return self._outpatient_physician

    @outpatient_physician.setter
    def outpatient_physician(self, outpatient_physician):
        """
        Sets the outpatient_physician of this ACAPlan.
        Benefits summary for outpatient physician coverage

        :param outpatient_physician: The outpatient_physician of this ACAPlan.
        :type: str
        """

        self._outpatient_physician = outpatient_physician

    @property
    def outpatient_substance(self):
        """
        Gets the outpatient_substance of this ACAPlan.
        Outpatient substance abuse benefits summary

        :return: The outpatient_substance of this ACAPlan.
        :rtype: str
        """
        return self._outpatient_substance

    @outpatient_substance.setter
    def outpatient_substance(self, outpatient_substance):
        """
        Sets the outpatient_substance of this ACAPlan.
        Outpatient substance abuse benefits summary

        :param outpatient_substance: The outpatient_substance of this ACAPlan.
        :type: str
        """

        self._outpatient_substance = outpatient_substance

    @property
    def plan_market(self):
        """
        Gets the plan_market of this ACAPlan.
        Market in which the plan is offered (on_marketplace, shop, etc)

        :return: The plan_market of this ACAPlan.
        :rtype: str
        """
        return self._plan_market

    @plan_market.setter
    def plan_market(self, plan_market):
        """
        Sets the plan_market of this ACAPlan.
        Market in which the plan is offered (on_marketplace, shop, etc)

        :param plan_market: The plan_market of this ACAPlan.
        :type: str
        """

        self._plan_market = plan_market

    @property
    def preferred_brand_drugs(self):
        """
        Gets the preferred_brand_drugs of this ACAPlan.
        Cost under the plan for perferred brand drugs

        :return: The preferred_brand_drugs of this ACAPlan.
        :rtype: str
        """
        return self._preferred_brand_drugs

    @preferred_brand_drugs.setter
    def preferred_brand_drugs(self, preferred_brand_drugs):
        """
        Sets the preferred_brand_drugs of this ACAPlan.
        Cost under the plan for perferred brand drugs

        :param preferred_brand_drugs: The preferred_brand_drugs of this ACAPlan.
        :type: str
        """

        self._preferred_brand_drugs = preferred_brand_drugs

    @property
    def prenatal_postnatal_care(self):
        """
        Gets the prenatal_postnatal_care of this ACAPlan.
        Inpatient substance abuse benefits summary

        :return: The prenatal_postnatal_care of this ACAPlan.
        :rtype: str
        """
        return self._prenatal_postnatal_care

    @prenatal_postnatal_care.setter
    def prenatal_postnatal_care(self, prenatal_postnatal_care):
        """
        Sets the prenatal_postnatal_care of this ACAPlan.
        Inpatient substance abuse benefits summary

        :param prenatal_postnatal_care: The prenatal_postnatal_care of this ACAPlan.
        :type: str
        """

        self._prenatal_postnatal_care = prenatal_postnatal_care

    @property
    def preventative_care(self):
        """
        Gets the preventative_care of this ACAPlan.
        Benefits summary for preventative care

        :return: The preventative_care of this ACAPlan.
        :rtype: str
        """
        return self._preventative_care

    @preventative_care.setter
    def preventative_care(self, preventative_care):
        """
        Sets the preventative_care of this ACAPlan.
        Benefits summary for preventative care

        :param preventative_care: The preventative_care of this ACAPlan.
        :type: str
        """

        self._preventative_care = preventative_care

    @property
    def premium_subsidized(self):
        """
        Gets the premium_subsidized of this ACAPlan.
        Cumulative premium amount after subsidy

        :return: The premium_subsidized of this ACAPlan.
        :rtype: float
        """
        return self._premium_subsidized

    @premium_subsidized.setter
    def premium_subsidized(self, premium_subsidized):
        """
        Sets the premium_subsidized of this ACAPlan.
        Cumulative premium amount after subsidy

        :param premium_subsidized: The premium_subsidized of this ACAPlan.
        :type: float
        """

        self._premium_subsidized = premium_subsidized

    @property
    def premium(self):
        """
        Gets the premium of this ACAPlan.
        Cumulative premium amount

        :return: The premium of this ACAPlan.
        :rtype: float
        """
        return self._premium

    @premium.setter
    def premium(self, premium):
        """
        Sets the premium of this ACAPlan.
        Cumulative premium amount

        :param premium: The premium of this ACAPlan.
        :type: float
        """

        self._premium = premium

    @property
    def premium_source(self):
        """
        Gets the premium_source of this ACAPlan.
        Source of the base pricing data

        :return: The premium_source of this ACAPlan.
        :rtype: str
        """
        return self._premium_source

    @premium_source.setter
    def premium_source(self, premium_source):
        """
        Sets the premium_source of this ACAPlan.
        Source of the base pricing data

        :param premium_source: The premium_source of this ACAPlan.
        :type: str
        """

        self._premium_source = premium_source

    @property
    def primary_care_physician(self):
        """
        Gets the primary_care_physician of this ACAPlan.
        Cost under the plan to visit a Primary Care Physician

        :return: The primary_care_physician of this ACAPlan.
        :rtype: str
        """
        return self._primary_care_physician

    @primary_care_physician.setter
    def primary_care_physician(self, primary_care_physician):
        """
        Sets the primary_care_physician of this ACAPlan.
        Cost under the plan to visit a Primary Care Physician

        :param primary_care_physician: The primary_care_physician of this ACAPlan.
        :type: str
        """

        self._primary_care_physician = primary_care_physician

    @property
    def rehabilitation_services(self):
        """
        Gets the rehabilitation_services of this ACAPlan.
        Benefits summary for rehabilitation services

        :return: The rehabilitation_services of this ACAPlan.
        :rtype: str
        """
        return self._rehabilitation_services

    @rehabilitation_services.setter
    def rehabilitation_services(self, rehabilitation_services):
        """
        Sets the rehabilitation_services of this ACAPlan.
        Benefits summary for rehabilitation services

        :param rehabilitation_services: The rehabilitation_services of this ACAPlan.
        :type: str
        """

        self._rehabilitation_services = rehabilitation_services

    @property
    def skilled_nursing(self):
        """
        Gets the skilled_nursing of this ACAPlan.
        Benefits summary for skilled nursing services

        :return: The skilled_nursing of this ACAPlan.
        :rtype: str
        """
        return self._skilled_nursing

    @skilled_nursing.setter
    def skilled_nursing(self, skilled_nursing):
        """
        Sets the skilled_nursing of this ACAPlan.
        Benefits summary for skilled nursing services

        :param skilled_nursing: The skilled_nursing of this ACAPlan.
        :type: str
        """

        self._skilled_nursing = skilled_nursing

    @property
    def specialist(self):
        """
        Gets the specialist of this ACAPlan.
        Cost under the plan to visit a specialist

        :return: The specialist of this ACAPlan.
        :rtype: str
        """
        return self._specialist

    @specialist.setter
    def specialist(self, specialist):
        """
        Sets the specialist of this ACAPlan.
        Cost under the plan to visit a specialist

        :param specialist: The specialist of this ACAPlan.
        :type: str
        """

        self._specialist = specialist

    @property
    def specialty_drugs(self):
        """
        Gets the specialty_drugs of this ACAPlan.
        Cost under the plan for specialty drugs

        :return: The specialty_drugs of this ACAPlan.
        :rtype: str
        """
        return self._specialty_drugs

    @specialty_drugs.setter
    def specialty_drugs(self, specialty_drugs):
        """
        Sets the specialty_drugs of this ACAPlan.
        Cost under the plan for specialty drugs

        :param specialty_drugs: The specialty_drugs of this ACAPlan.
        :type: str
        """

        self._specialty_drugs = specialty_drugs

    @property
    def urgent_care(self):
        """
        Gets the urgent_care of this ACAPlan.
        Benefits summary for urgent care

        :return: The urgent_care of this ACAPlan.
        :rtype: str
        """
        return self._urgent_care

    @urgent_care.setter
    def urgent_care(self, urgent_care):
        """
        Sets the urgent_care of this ACAPlan.
        Benefits summary for urgent care

        :param urgent_care: The urgent_care of this ACAPlan.
        :type: str
        """

        self._urgent_care = urgent_care

    @property
    def actuarial_value(self):
        """
        Gets the actuarial_value of this ACAPlan.
        Percentage of total average costs for covered benefits that a plan will cover.

        :return: The actuarial_value of this ACAPlan.
        :rtype: float
        """
        return self._actuarial_value

    @actuarial_value.setter
    def actuarial_value(self, actuarial_value):
        """
        Sets the actuarial_value of this ACAPlan.
        Percentage of total average costs for covered benefits that a plan will cover.

        :param actuarial_value: The actuarial_value of this ACAPlan.
        :type: float
        """

        self._actuarial_value = actuarial_value

    @property
    def chiropractic_services(self):
        """
        Gets the chiropractic_services of this ACAPlan.
        Chiropractic services benefits summary

        :return: The chiropractic_services of this ACAPlan.
        :rtype: str
        """
        return self._chiropractic_services

    @chiropractic_services.setter
    def chiropractic_services(self, chiropractic_services):
        """
        Sets the chiropractic_services of this ACAPlan.
        Chiropractic services benefits summary

        :param chiropractic_services: The chiropractic_services of this ACAPlan.
        :type: str
        """

        self._chiropractic_services = chiropractic_services

    @property
    def coinsurance(self):
        """
        Gets the coinsurance of this ACAPlan.
        Standard cost share for most benefits

        :return: The coinsurance of this ACAPlan.
        :rtype: float
        """
        return self._coinsurance

    @coinsurance.setter
    def coinsurance(self, coinsurance):
        """
        Sets the coinsurance of this ACAPlan.
        Standard cost share for most benefits

        :param coinsurance: The coinsurance of this ACAPlan.
        :type: float
        """

        self._coinsurance = coinsurance

    @property
    def embedded_deductible(self):
        """
        Gets the embedded_deductible of this ACAPlan.
        Is the individual deductible for each covered person, embedded in the family deductible

        :return: The embedded_deductible of this ACAPlan.
        :rtype: str
        """
        return self._embedded_deductible

    @embedded_deductible.setter
    def embedded_deductible(self, embedded_deductible):
        """
        Sets the embedded_deductible of this ACAPlan.
        Is the individual deductible for each covered person, embedded in the family deductible

        :param embedded_deductible: The embedded_deductible of this ACAPlan.
        :type: str
        """

        self._embedded_deductible = embedded_deductible

    @property
    def gated(self):
        """
        Gets the gated of this ACAPlan.
        Does the plan's network require a physician referral?

        :return: The gated of this ACAPlan.
        :rtype: bool
        """
        return self._gated

    @gated.setter
    def gated(self, gated):
        """
        Sets the gated of this ACAPlan.
        Does the plan's network require a physician referral?

        :param gated: The gated of this ACAPlan.
        :type: bool
        """

        self._gated = gated

    @property
    def imaging_center(self):
        """
        Gets the imaging_center of this ACAPlan.
        Imaging center benefits summary

        :return: The imaging_center of this ACAPlan.
        :rtype: str
        """
        return self._imaging_center

    @imaging_center.setter
    def imaging_center(self, imaging_center):
        """
        Sets the imaging_center of this ACAPlan.
        Imaging center benefits summary

        :param imaging_center: The imaging_center of this ACAPlan.
        :type: str
        """

        self._imaging_center = imaging_center

    @property
    def imaging_physician(self):
        """
        Gets the imaging_physician of this ACAPlan.
        Imaging physician benefits summary

        :return: The imaging_physician of this ACAPlan.
        :rtype: str
        """
        return self._imaging_physician

    @imaging_physician.setter
    def imaging_physician(self, imaging_physician):
        """
        Sets the imaging_physician of this ACAPlan.
        Imaging physician benefits summary

        :param imaging_physician: The imaging_physician of this ACAPlan.
        :type: str
        """

        self._imaging_physician = imaging_physician

    @property
    def lab_test(self):
        """
        Gets the lab_test of this ACAPlan.
        Lab test benefits summary

        :return: The lab_test of this ACAPlan.
        :rtype: str
        """
        return self._lab_test

    @lab_test.setter
    def lab_test(self, lab_test):
        """
        Sets the lab_test of this ACAPlan.
        Lab test benefits summary

        :param lab_test: The lab_test of this ACAPlan.
        :type: str
        """

        self._lab_test = lab_test

    @property
    def mail_order_rx(self):
        """
        Gets the mail_order_rx of this ACAPlan.
        Multiple of the standard Rx cost share for orders filled via mail order

        :return: The mail_order_rx of this ACAPlan.
        :rtype: float
        """
        return self._mail_order_rx

    @mail_order_rx.setter
    def mail_order_rx(self, mail_order_rx):
        """
        Sets the mail_order_rx of this ACAPlan.
        Multiple of the standard Rx cost share for orders filled via mail order

        :param mail_order_rx: The mail_order_rx of this ACAPlan.
        :type: float
        """

        self._mail_order_rx = mail_order_rx

    @property
    def nonpreferred_generic_drug_share(self):
        """
        Gets the nonpreferred_generic_drug_share of this ACAPlan.
        Non-preferred generic drugs benefits summary

        :return: The nonpreferred_generic_drug_share of this ACAPlan.
        :rtype: str
        """
        return self._nonpreferred_generic_drug_share

    @nonpreferred_generic_drug_share.setter
    def nonpreferred_generic_drug_share(self, nonpreferred_generic_drug_share):
        """
        Sets the nonpreferred_generic_drug_share of this ACAPlan.
        Non-preferred generic drugs benefits summary

        :param nonpreferred_generic_drug_share: The nonpreferred_generic_drug_share of this ACAPlan.
        :type: str
        """

        self._nonpreferred_generic_drug_share = nonpreferred_generic_drug_share

    @property
    def nonpreferred_specialty_drug_share(self):
        """
        Gets the nonpreferred_specialty_drug_share of this ACAPlan.
        Non-preferred specialty drugs benefits summary

        :return: The nonpreferred_specialty_drug_share of this ACAPlan.
        :rtype: str
        """
        return self._nonpreferred_specialty_drug_share

    @nonpreferred_specialty_drug_share.setter
    def nonpreferred_specialty_drug_share(self, nonpreferred_specialty_drug_share):
        """
        Sets the nonpreferred_specialty_drug_share of this ACAPlan.
        Non-preferred specialty drugs benefits summary

        :param nonpreferred_specialty_drug_share: The nonpreferred_specialty_drug_share of this ACAPlan.
        :type: str
        """

        self._nonpreferred_specialty_drug_share = nonpreferred_specialty_drug_share

    @property
    def outpatient_ambulatory_care_center(self):
        """
        Gets the outpatient_ambulatory_care_center of this ACAPlan.
        Outpatient ambulatory care center benefits summary

        :return: The outpatient_ambulatory_care_center of this ACAPlan.
        :rtype: str
        """
        return self._outpatient_ambulatory_care_center

    @outpatient_ambulatory_care_center.setter
    def outpatient_ambulatory_care_center(self, outpatient_ambulatory_care_center):
        """
        Sets the outpatient_ambulatory_care_center of this ACAPlan.
        Outpatient ambulatory care center benefits summary

        :param outpatient_ambulatory_care_center: The outpatient_ambulatory_care_center of this ACAPlan.
        :type: str
        """

        self._outpatient_ambulatory_care_center = outpatient_ambulatory_care_center

    @property
    def plan_calendar(self):
        """
        Gets the plan_calendar of this ACAPlan.
        Are deductibles and MOOPs reset on Dec-31 (\"calendar year\") or 365 days after enrollment date (\"plan year\")?

        :return: The plan_calendar of this ACAPlan.
        :rtype: str
        """
        return self._plan_calendar

    @plan_calendar.setter
    def plan_calendar(self, plan_calendar):
        """
        Sets the plan_calendar of this ACAPlan.
        Are deductibles and MOOPs reset on Dec-31 (\"calendar year\") or 365 days after enrollment date (\"plan year\")?

        :param plan_calendar: The plan_calendar of this ACAPlan.
        :type: str
        """

        self._plan_calendar = plan_calendar

    @property
    def prenatal_care(self):
        """
        Gets the prenatal_care of this ACAPlan.
        Prenatal care benefits summary

        :return: The prenatal_care of this ACAPlan.
        :rtype: str
        """
        return self._prenatal_care

    @prenatal_care.setter
    def prenatal_care(self, prenatal_care):
        """
        Sets the prenatal_care of this ACAPlan.
        Prenatal care benefits summary

        :param prenatal_care: The prenatal_care of this ACAPlan.
        :type: str
        """

        self._prenatal_care = prenatal_care

    @property
    def postnatal_care(self):
        """
        Gets the postnatal_care of this ACAPlan.
        Post-natal care benefits summary

        :return: The postnatal_care of this ACAPlan.
        :rtype: str
        """
        return self._postnatal_care

    @postnatal_care.setter
    def postnatal_care(self, postnatal_care):
        """
        Sets the postnatal_care of this ACAPlan.
        Post-natal care benefits summary

        :param postnatal_care: The postnatal_care of this ACAPlan.
        :type: str
        """

        self._postnatal_care = postnatal_care

    @property
    def skilled_nursing_facility_365(self):
        """
        Gets the skilled_nursing_facility_365 of this ACAPlan.
        Does the plan cover full-time, year-round, nursing facilities?

        :return: The skilled_nursing_facility_365 of this ACAPlan.
        :rtype: str
        """
        return self._skilled_nursing_facility_365

    @skilled_nursing_facility_365.setter
    def skilled_nursing_facility_365(self, skilled_nursing_facility_365):
        """
        Sets the skilled_nursing_facility_365 of this ACAPlan.
        Does the plan cover full-time, year-round, nursing facilities?

        :param skilled_nursing_facility_365: The skilled_nursing_facility_365 of this ACAPlan.
        :type: str
        """

        self._skilled_nursing_facility_365 = skilled_nursing_facility_365

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
