# coding: utf-8

"""
    Vericred API

    Vericred's API allows you to search for Health Plans that a specific doctor
accepts.

## Getting Started

Visit our [Developer Portal](https://vericred.3scale.net) to
create an account.

Once you have created an account, you can create one Application for
Production and another for our Sandbox (select the appropriate Plan when
you create the Application).

## Authentication

To authenticate, pass the API Key you created in the Developer Portal as
a `Vericred-Api-Key` header.

`curl -H 'Vericred-Api-Key: YOUR_KEY' "https://api.vericred.com/providers?search_term=Foo&zip_code=11215"`

## Versioning

Vericred's API default to the latest version.  However, if you need a specific
version, you can request it with an `Accept-Version` header.

The current version is `v3`.  Previous versions are `v1` and `v2`.

`curl -H 'Vericred-Api-Key: YOUR_KEY' -H 'Accept-Version: v2' "https://api.vericred.com/providers?search_term=Foo&zip_code=11215"`

## Pagination

Endpoints that accept `page` and `per_page` parameters are paginated. They expose
four additional fields that contain data about your position in the response,
namely `Total`, `Per-Page`, `Link`, and `Page` as described in [RFC-5988](https://tools.ietf.org/html/rfc5988).

For example, to display 5 results per page and view the second page of a
`GET` to `/networks`, your final request would be `GET /networks?....page=2&per_page=5`.

## Sideloading

When we return multiple levels of an object graph (e.g. `Provider`s and their `State`s
we sideload the associated data.  In this example, we would provide an Array of
`State`s and a `state_id` for each provider.  This is done primarily to reduce the
payload size since many of the `Provider`s will share a `State`

```
{
  providers: [{ id: 1, state_id: 1}, { id: 2, state_id: 1 }],
  states: [{ id: 1, code: 'NY' }]
}
```

If you need the second level of the object graph, you can just match the
corresponding id.

## Selecting specific data

All endpoints allow you to specify which fields you would like to return.
This allows you to limit the response to contain only the data you need.

For example, let's take a request that returns the following JSON by default

```
{
  provider: {
    id: 1,
    name: 'John',
    phone: '1234567890',
    field_we_dont_care_about: 'value_we_dont_care_about'
  },
  states: [{
    id: 1,
    name: 'New York',
    code: 'NY',
    field_we_dont_care_about: 'value_we_dont_care_about'
  }]
}
```

To limit our results to only return the fields we care about, we specify the
`select` query string parameter for the corresponding fields in the JSON
document.

In this case, we want to select `name` and `phone` from the `provider` key,
so we would add the parameters `select=provider.name,provider.phone`.
We also want the `name` and `code` from the `states` key, so we would
add the parameters `select=states.name,staes.code`.  The id field of
each document is always returned whether or not it is requested.

Our final request would be `GET /providers/12345?select=provider.name,provider.phone,states.name,states.code`

The response would be

```
{
  provider: {
    id: 1,
    name: 'John',
    phone: '1234567890'
  },
  states: [{
    id: 1,
    name: 'New York',
    code: 'NY'
  }]
}
```



    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

# import models into sdk package
from .models.applicant import Applicant
from .models.base import Base
from .models.carrier import Carrier
from .models.carrier_subsidiary import CarrierSubsidiary
from .models.county import County
from .models.county_bulk import CountyBulk
from .models.drug import Drug
from .models.drug_coverage import DrugCoverage
from .models.drug_coverage_response import DrugCoverageResponse
from .models.drug_package import DrugPackage
from .models.drug_search_response import DrugSearchResponse
from .models.meta import Meta
from .models.network import Network
from .models.network_search_response import NetworkSearchResponse
from .models.plan import Plan
from .models.plan_county import PlanCounty
from .models.plan_county_bulk import PlanCountyBulk
from .models.plan_search_response import PlanSearchResponse
from .models.plan_search_result import PlanSearchResult
from .models.plan_show_response import PlanShowResponse
from .models.pricing import Pricing
from .models.provider import Provider
from .models.provider_show_response import ProviderShowResponse
from .models.providers_search_response import ProvidersSearchResponse
from .models.rating_area import RatingArea
from .models.request_plan_find import RequestPlanFind
from .models.request_plan_find_applicant import RequestPlanFindApplicant
from .models.request_plan_find_drug_package import RequestPlanFindDrugPackage
from .models.request_plan_find_provider import RequestPlanFindProvider
from .models.request_providers_search import RequestProvidersSearch
from .models.service_area import ServiceArea
from .models.service_area_zip_county import ServiceAreaZipCounty
from .models.state import State
from .models.zip_code import ZipCode
from .models.zip_counties_response import ZipCountiesResponse
from .models.zip_county import ZipCounty
from .models.zip_county_bulk import ZipCountyBulk
from .models.zip_county_response import ZipCountyResponse

# import apis into sdk package
from .apis.drugs_api import DrugsApi
from .apis.networks_api import NetworksApi
from .apis.plans_api import PlansApi
from .apis.providers_api import ProvidersApi
from .apis.zip_counties_api import ZipCountiesApi

# import ApiClient
from .api_client import ApiClient

from .configuration import Configuration

configuration = Configuration()
